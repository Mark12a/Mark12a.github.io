<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2020计算机保研夏令营--夏季过往</title>
    <url>/2020/09/30/2020%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BF%9D%E7%A0%94%E5%A4%8F%E4%BB%A4%E8%90%A5-%E5%A4%8F%E5%AD%A3%E8%BF%87%E5%BE%80/</url>
    <content><![CDATA[<p>​    伴随着前几天浙大直博面试结束和昨天的一场秋雨，今年的夏季已经结束，我的保研历程也大概已经结束，只剩下最后需要进行选择的部分了，在选择完成后我应该会再次更新这个博客，暂且先写写夏令营的部分，因为推免准备的时候很多人的面经有所帮助，也希望这份可以帮助后来的人</p>
<h3 id="个人背景"><a href="#个人背景" class="headerlink" title="个人背景"></a>个人背景</h3><ul>
<li>帝都某末流211计算机与信息技术学院  学科评估A-</li>
<li>排名11/226（前5学期成绩） 刚好前5%</li>
<li>英语 CET-4 597 CET-6 491 IELTS 7.0</li>
<li>奖学金若干，但是没有卵用</li>
<li>竞赛奖项若干，小的Project若干，有一项国家级奖励，但是多数没有什么太大作用</li>
<li>北京市级大创一项，一段实验室实习经历，但是没有产出</li>
</ul>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><h4 id="个人简历"><a href="#个人简历" class="headerlink" title="个人简历"></a>个人简历</h4><p>​    在写简历之前，也有看不少的模板，但是发现都过于复杂，于是偷懒的我就直接选择了<a href="https://www.wondercv.com" target="_blank" rel="noopener">超级简历</a>，各种调整也很方便，建议项目经历上明确给出自己的work内容，其他都较为正常，简洁大方即可。</p>
<h4 id="成绩单"><a href="#成绩单" class="headerlink" title="成绩单"></a>成绩单</h4><p>​    夏令营使用的是前5学期的成绩，建议尽早向教务老师去要，因为后期可能存在换英语成绩的情况会导致你的排名下跌。</p>
<h4 id="英语成绩"><a href="#英语成绩" class="headerlink" title="英语成绩"></a>英语成绩</h4><p>​    一般需要复印件，今年由于疫情的原因，很多人没有原件，也没有拍照，如果你遇到掉了的情况，可以到cet报名的那个网站上去补，没记错的话应该是20块钱，然后填上你的地址，就会寄给你，也建议尽早完成，后期可能就会遇到大批量的造成排队的情况。</p>
<h4 id="需要盖章的文件"><a href="#需要盖章的文件" class="headerlink" title="需要盖章的文件"></a>需要盖章的文件</h4><p>​    这里主要指各种需要盖章的申请表，今年是直接发给教务老师或者辅导员老师，老师就会盖好扫描给你，【超级感谢教学科的老师和辅导员小可爱老师！，建议之后合在一起去盖章，这样不会麻烦老师多次。</p>
<h4 id="推荐信"><a href="#推荐信" class="headerlink" title="推荐信"></a>推荐信</h4><p>​    有部分学校需要提供2-3位专家的推荐信，我是找了大创的指导老师，一位授课老师，还有一位宿舍导师【超级感谢三位老师的支持！，可以去找你熟悉的老师，大部分老师都会很乐意帮助你的，但是建议你和他们有足够多的交集，这样也可以填充推荐信的内容（虽然大部分招生办最后都不看）。</p>
<h4 id="个人陈述"><a href="#个人陈述" class="headerlink" title="个人陈述"></a>个人陈述</h4><p>​    个人陈述的部分我是从我的基本情况、科研竞赛、未来规划三部分来写，字数可以多一点，建议1500字，要求少的就可以进行删减和简化。</p>
<h4 id="获奖证明"><a href="#获奖证明" class="headerlink" title="获奖证明"></a>获奖证明</h4><p>​    各种获奖证明记得进行留存，包括原件+拍照，不然找不到就挺麻烦的。</p>
<h3 id="院校报名"><a href="#院校报名" class="headerlink" title="院校报名"></a>院校报名</h3><p>​    大部分院校的夏令营报名都在4月之后了，但是有些院校或者实验室会更早一些，如果有想法建议尽早关注。</p>
<h4 id="港校"><a href="#港校" class="headerlink" title="港校"></a>港校</h4><p>​    包括港大，港科大，港中文，各种workshop和mini营，时间都很早，想去的一定要尽早关注，大概3月份就会有了，我本来是想报港中文的深高金数据科学硕士项目，但是后来还是没报，主要材料有些麻烦，大部分都需要你准备对应的英文版，深高金今年甚至需要你提交一份2min的英文自我介绍，emmm最后我就放弃了。可以看看这位<a href="https://zhuanlan.zhihu.com/p/246517943" target="_blank" rel="noopener">戴大佬的面经</a>。</p>
<h4 id="南大Lamda"><a href="#南大Lamda" class="headerlink" title="南大Lamda"></a>南大Lamda</h4><p>​    Lamda的报名也比较早，而且因为是周boss的实验室，异常火爆，具体同样可以看看<a href="https://zhuanlan.zhihu.com/p/237472334" target="_blank" rel="noopener">戴大佬的面经</a>。</p>
<h4 id="哈工大SCIR"><a href="#哈工大SCIR" class="headerlink" title="哈工大SCIR"></a>哈工大SCIR</h4><p>​    SCIR实验室也是很早，我记得有一个实验室的表单需要填写，其中会有“是否将SCIR列为第一选择”&amp;“如果录取是否一定来”这样的问题，我没有都写是，据我所知，没有全部同意的都没有进面试，所以，想去SCIR的一定要坚定一点！</p>
<h4 id="东南PALM"><a href="#东南PALM" class="headerlink" title="东南PALM"></a>东南PALM</h4><p>​    东南的PALM实验室也很棒，老师很多都是从Lamda出来的，有人称为读了PALM=读了Lamda（误），这个实验室有一批开始的神奇，但是在东南报名截止前夕还有一批可以申请，想去的同学请注意关注。</p>
<h4 id="我的报名"><a href="#我的报名" class="headerlink" title="我的报名"></a>我的报名</h4><p>​    今年因为疫情的原因，心里丝毫没有底，所以报名相对报了比较多，尤其是南大开放日出来，发现我院只有rank1能进，南开居然rank2都没入营的时候，更慌了，又投了一波。目测因为今年大部分夏令营都是线上举办，加上懂王操作的原因，焦虑像传染病一样蔓延，导致大家都海了起来，甚至知乎还出现了相关提问。</p>
<h3 id="夏令营"><a href="#夏令营" class="headerlink" title="夏令营"></a>夏令营</h3><p>​    我最终参加的夏令营有：华东师范数据学院，复旦工研院，北航计算机学院，天大智能计算学部，中科大计算机学院，厦大信息学院，中科院软件所，上财统计与管理学院。</p>
<h4 id="复旦工研院"><a href="#复旦工研院" class="headerlink" title="复旦工研院"></a>复旦工研院</h4><p>​    复旦工研院是我参加的第一个夏令营，在夏令营听宣讲的时候，感觉这个学院很新，很多方向和机械和控制相关，做计算机的不是很多，感觉计算机在这个学院主要是为其他方向服务的。但是复旦招生老师说的话真的特别触动我，<strong>“我希望大家不只是做研究，还能够更多的去参加社团，接触更多的人”、“我们对于困难生的补助，不只在于希望大家能够正常生活，还能够更多利用社会资源去开拓视野”</strong>，真“无用的灵魂”，瞬间就觉得复旦太棒了。</p>
<p>​    当然棒归棒，面试还是要面的，但是第一场面试我表现的并不是很好。我面试的顺位靠后，因此我进去的时候老师还在吃盒饭【老师辛苦，我也很饿。。。</p>
<p>​    面试流程大概是英语（1-2min）+专业课+其他提问，我的英语表现还可以，我都背了下来，还比较流畅，专业课问了我几个数据库范式的问题，大概是因为我表达的问题，导致老师有一点误解我的话，对我进行了质疑，正当我准备解释的时候，网，它断了。。。于是我就被调到了最后进行面试，进行了一波解释，但是老师似乎并不满意我的解释，最后问了一点我项目的问题，都比较正常，我也都答上来了，最后问我是不是接受直博，我不是很想在这个学院读直博，于是选择了不。</p>
<p>​    最后我就进了waiting list，OK Fine，我至今还没被补录【哭泣.jpg</p>
<h4 id="华东师范数据学院"><a href="#华东师范数据学院" class="headerlink" title="华东师范数据学院"></a>华东师范数据学院</h4><p>​    华东师范应该是我参加的夏令营里面体验最好的了，没有之一</p>
<p>​    我来吹一下这个学院的夏令营体验，不想看的可以跳过。首先，行政老师真的特别拉好感，在你入营之前会进行两波确认，如果第一波鸽了，后续会进行补录，最后还会通知最终的名单，就非常严谨，不像有的学校，直接丢一个群号给你让你加群，就很不尊重学生。其次，夏令营进行的过程当中，非常尊重学生，不管在什么时候说夏令营，老师们的态度始终都是“我们理解优秀的同学会有很多offer，我们也充分尊重并理解，但是我们希望吸引到你们”，真的，特别尊重学生，感动哭了。然后，这个学院进行机试考核的时候，也非常严谨，一个人一个腾讯会议，会有专门的老师监考，你需要分享屏幕，监考老师会录屏，同时你需要双机位，这是我在夏令营中监考的最高层次，特别严谨。同时，感觉这个学院非常的接地气，他们的口号是“应用驱动创新”，对比起很多略微有点空的研究，他们始终注重落地的过程，印象中有一个和交通银行进行的数据库项目，不仅拿到了国家科技进步二等奖，还在交通银行进行了应用，感觉就非常棒。最后，钱卫宁教授非常有个人魅力，可以去知乎看一看，我觉得教授魅力很足。</p>
<p>​    对于这个学院网上有一个误解，说是长学制，学硕四年，夏令营的时候有同学进行了提问，确认我们这届是3年（标准学制）。</p>
<p>​    华东师范有一个机试，题目不是很难，并没有涉及到很复杂的算法，主要考察基础编程能力。记分是按照先计算ac的题目，然后计算没有全过的题目的得分，当时有点小慌，看着rank1的大佬10min一题，我第一题还卡在最后一个样例，就比较慌，之后就调整了心态，一题一题做，反而做的还行，不过最后也没有很高，大概在30%左右。</p>
<p>​    这个学院的面试，我答得也是不够好，面试流程是翻译一段英语句子+专业课/项目提问，专业课的问题我记得的大概有下面的几个</p>
<ul>
<li>死锁的四个条件是什么</li>
<li>如何去解决死锁的问题</li>
<li>数据库的索引有哪些分类</li>
</ul>
<p>​    这三个题目我回答的还是可以的，毕竟之前刚刚复习，然后他看了一眼我的成绩单，说你机器学习拿了A，来问几个机器学习，因为我没有复习，所以回答的就比较磕磕绊绊，不是很好。</p>
<pre><code>- CNN和RNN分别适用于什么样的数据集
- 贝叶斯公式的表达
- 朴素贝叶斯和普通贝叶斯的区别
- 简述高斯混合模型
- 简述交叉熵的内容和含义</code></pre><p>   总之就是回答的不太好，面完之后觉得哦豁，完蛋了，有点慌了，不知道后面咋办。没想到最终还拿了学硕的offer，说不定是看我基础问题回答的还挺全。所以要是面的不好，也不用太着急，说不定你就进了。</p>
<h3 id="北航计算机"><a href="#北航计算机" class="headerlink" title="北航计算机"></a>北航计算机</h3><p>​    北航计算机的夏令营非常干脆利落，只有考核，没有其他的宣讲活动，而且北航的效率非常高，第一天测试，第二天机试，第三天出面试分组名单，第四天出结果，堪称效率最高的夏令营。（有可能时间记得不准确，但是肯定一周之内，效率非常高）</p>
<p>​    北航的机试总是喜欢大模拟，我做了往届的题目，全部都是大模拟，非常麻烦。印象中第一题60分，是这样的：</p>
<pre><code>&gt; 给一组随机的数，构成一颗完全二叉树，要求构成的树的中序遍历为这组数从小到大的排列，最终输出这棵树的层序遍历。</code></pre><p>​    这个题其实不难，我大概花了不到20min就搞定了，但是后来交流的时候，发现很多人想偏了，多说无益，放上代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 400</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[MAX];</span><br><span class="line"><span class="keyword">int</span> b[MAX];</span><br><span class="line"><span class="keyword">int</span> c[MAX];</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postOrder</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b[<span class="number">2</span>*i+<span class="number">1</span>] != <span class="number">-1</span>)</span><br><span class="line">        postOrder(<span class="number">2</span>*i+<span class="number">1</span>);</span><br><span class="line">    c[i] = a[cnt++];</span><br><span class="line">    <span class="keyword">if</span> (b[<span class="number">2</span>*i+<span class="number">2</span>] != <span class="number">-1</span>)</span><br><span class="line">        postOrder(<span class="number">2</span>*i+<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="built_in">memset</span>(b, <span class="number">-1</span>, <span class="keyword">sizeof</span>(b));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">        b[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(a, a+n);</span><br><span class="line">    postOrder(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (b[i] != <span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;c[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​    第二题是个大模拟，40分，其实很简单，但是因为我样例只看了一半，第二个样例没看，然后没有充分理解题意。就gg了。。。。所以机试一定要看清题目啊！</p>
<p>​    然后就是面试了，机试会筛选大概一半的人参加面试，最终面试也会大概筛选一半的人为优营。北航的面试是政治题+数学基础+专业课+项目经历。</p>
<p>​    政治题部分会让你抽一道题，你答得别太离谱就行。</p>
<p>​    数学部分我记得的不是特别多了，有印象的大概有：</p>
<ul>
<li><p>如何求梯度？</p>
</li>
<li><p>给你一个物体表面离散的一堆点，如何求任意表面的法向量？</p>
</li>
<li><p>矩阵中秩和迹是如何计算的，物理意义分别是什么？</p>
<p> 专业课的部分，那老师和我说：我看你第一题做的挺快的，怎么第二题做的不太好啊？我就阿巴阿巴解释了一下。然后说看你用的C++，来问点C++</p>
<ul>
<li><p>C++的类中的成员变量是如何初始化的？</p>
</li>
<li><p>C++中类初始化的顺序？</p>
</li>
<li><p>C++的重载需要注意什么问题？</p>
</li>
<li><p>malloc和new的区别</p>
</li>
<li><p>堆有什么样的应用？</p>
</li>
<li><p>简述堆构建的过程</p>
<p>其他的…就记不得了…似乎还有一点c++的问题…..</p>
</li>
</ul>
</li>
</ul>
<p>​    最后就是等待出结果了，北航非常利索，早上八点就出了结果，我就比最低分高了一点进了…有惊无险</p>
<p>​    北航拿到优营之后还需要联系老师，由于我比较老实，夏令营的时候没有找到【心酸.jpg，原因在此不写了，想知道的可以私戳我，可以和你说一说。</p>
<h3 id="天大智能计算学部"><a href="#天大智能计算学部" class="headerlink" title="天大智能计算学部"></a>天大智能计算学部</h3><p>​    天大的夏令营大概就是两个部分，会有智能计算学部的宣讲会，学部下面有三个学院：计算机、网安和软件学院，最终优营是先根据分数排名，靠前的会按照你报名的专业来录取，之后的就全是专硕了。</p>
<p>​    天大的考核也很简单，大概做一个时长为4min的ppt展示一下你自己，然后老师们会问你一些问题，大概3min，最后给分。问我的大多数是我的大创问题，所以我回答的应该还可以。但是最后拿的是waiting list，不是太懂这个是怎么给分的，比较迷。</p>
<p>​    但是从之后来看，放天大鸽子的还是有不少的，waiting应该基本都能补上，所以不用太担心，有一个要注意问题是，天大不会补学硕的，也就是说学硕是只有那么多，之后前面鸽了后面专硕也不会补成学硕。</p>
<h3 id="中科大计算机学院"><a href="#中科大计算机学院" class="headerlink" title="中科大计算机学院"></a>中科大计算机学院</h3><p>​    中科大应该是所有夏令营最贴心的一个了，其他夏令营因为线上都取消了纪念品，中科大直接把纪念品给你寄到家，瞬间好感++（虽然那个包质量实在不咋地）。</p>
<p>​    中科大今年总的开营仪式是通过b站直播的，之后会进zoom进行学院的宣讲和答疑，第二天群里会公布每个实验室的宣讲腾讯会议号，挑选感兴趣的进行宣讲即可。</p>
<p>​    中科大的面试也是英语+提问。英语是问了你一个问题，然后你回答，类似“介绍一下你的家乡”这种，之后会问你一个英语的专业问题，一般不太难，直接回答即可。之后就是三位老师用中文对你提问，老师们看我做的项目和区块链沾边，目测这老师自己也是做区块链的，然后开始疯狂问我区块链，我回答了两个问题之后发现画风不太对，解释说“老师我这个只是区块链的背景，并没有用到里面的内容”，老师：“嗯嗯好的”，然后继续问。我内心………….</p>
<p>​    印象中的问的问题大概有</p>
<ul>
<li><p>区块链加密是对称的还是非对称的？</p>
</li>
<li><p>区块链由几个部分组成 ？（不是很懂这个问题，而且老师居然把以太坊的智能合约也算在内…..）</p>
</li>
<li><p>区块链是不是绝对安全的？</p>
</li>
<li><p>联盟链是什么？</p>
</li>
<li><p>哈希碰撞是什么？</p>
</li>
<li><p>银行能不能用区块链？不能的话如果我非要使用，应该在什么样的行政单位下使用？</p>
<p>还有一些其他的问题，记忆比较模糊了。。。反正这个问的我就比较痛苦，因为我大概只看过一点科普的内容，有的还快忘了。最后结果出来的时候，差了0.5分拿优营，进了候补，哭泣。</p>
</li>
</ul>
<h3 id="厦大信息学院"><a href="#厦大信息学院" class="headerlink" title="厦大信息学院"></a>厦大信息学院</h3><p>​    厦大拉了一个钉钉群，然后之后内容都在钉钉里面进行。看厦大宣传片就是觉得，厦大真。太好看了，虽然去过一回，但是看着宣传片还是会感叹太好看了。</p>
<p>​    厦大面试也是你先进行ppt展示，然后老师提问。老师们基本就是就我项目的数据来源，使用的数据大小，算法的原理，我承担的工作进行提问。自认为答得还是可以的，老师最后问我有没有联系厦大的导师？有没有其他offer，如果都给你你会选哪个？我说要看具体的方向和导师，就结束了，总时长大概20min。由此看来联系导师在厦大的过程中也占据有很重要地位。</p>
<p>​    最后给了我一个专硕。。。学硕几乎全给了本校，果断不想去了，而且还要求签保证书，当场拒绝。</p>
<h3 id="中科院软件所"><a href="#中科院软件所" class="headerlink" title="中科院软件所"></a>中科院软件所</h3><p>​    软件所是会先让你报名，报名之后，你所报名的实验室会首先筛选一波人，作为入营的营员。在入营之后，会再次统计你的意向实验室，来参加他们实验室的面试，这之前会告诉你初步的统计结果和去年实验室的招生名额，你可以看情况进行报名，千层博弈开始了。</p>
<p>​    我最后选了基础软件国家工程中心，没想到报名的只有5个人。。。面试流程大概就是做一个ppt展示一下你自己，然后老师们会进行提问，问的问题感觉和厦大的大同小异，所以回答的也很流畅，感觉老师们对我印象也还可以，最后果然拿了优营。但是软件所要你在没确定导师，没确定学硕还是专硕的情况下签保证书，还说要抄送给辅导员，我就果断拒绝了。offer–</p>
<p>###上财统计学院    </p>
<p>​    在我考北航机试的时候，上财打了个电话过来。因为考机试，所以错过了，之后打过去被告知入营了。</p>
<p>​    之所以会报上财是还有转商科的想法（我们学院今年目测要去三个北大汇丰，加上自己对于上海还是比较有好感，所以就报名了一个和计算机有点关系的学院。谁知道，一听宣讲会，老师们就开始说，他们学院已经在向互联网转型，传统的银行、证券公司，越来越难进，坑都被占完了，去年拿到的最高薪是拼多多。。。然后有位同学提问：“我们知道上财在财经领域校友资源和影响力非常强大，不知道在互联网领域是不是还是这样？”，老师果断说了句：“没有！”。我：emmmmmm………。难怪看入营放了十几个计算机的入营了。</p>
<p>​    值得一题的是，上财的面试排序是会直播给你看，非常严谨的一个学院，而且听说非常注重对于专硕的培养，就业非常好，然鹅，要去互联网为什么我还要来这…….</p>
<p>​    面试的部分大概分成以下几块：概率论与数理统计、线性代数、编程能力、英语能力。</p>
<p>​    概率论与数理统计部分考了求期望的一堆东西，我开始还有点紧张，回答的不对，老师可能看出来了，略微引导了我一下，然后就回答出来了，但是有一个知识点完全没听过，老师也就没有继续再问我。</p>
<p>​    线性代数部分考了一个证明，我想了一下就回答了，也不知道对不对，老师们一言未发，跳到了下一个部分。是一个和线性无关有关的证明题，但是之后和同学讨论了一下，发现我大概题目没看清……因为不管我理解的咋样都不太对…</p>
<p>​    编程能力就比较简单了，直接就要求算出来给丁范围内符号要求的一个数，我就直接说了枚举，然后老师们问我怎么判定是不是符合要求的，还得口述程序…这比手写还难受，我就说了一个简单的递归，没想到老师们还讨论了半天….之后还有个老师觉得我写的不对，被另一个老师解释了一下，才明白我的想法（我也不知道是不是真懂了，因为还举了个例子问我计算的流程…..就过了。</p>
<p>​    英语能力部分就是用英语介绍一下你的家乡，大概时长5min，反正你可劲说就行。</p>
<p>​    最后结果出来的时候，发现我是候补，然后特意看了一下，入营的计算机专业的，全是候补…绝了</p>
<p>​    这大概就是全部的夏令营内容了，预推免的部分我应该会继续更新。大概夏季也就这样过去了，有点遗憾，有点欢喜。</p>
<p>​    </p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>保研</tag>
        <tag>瞎想</tag>
      </tags>
  </entry>
  <entry>
    <title>近日胡思乱想</title>
    <url>/2020/06/04/%E8%BF%91%E6%97%A5%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Leetcode-P862</title>
    <url>/2020/04/26/Leetcode-P862/</url>
    <content><![CDATA[<h2 id="题目简介"><a href="#题目简介" class="headerlink" title="题目简介"></a>题目简介</h2><blockquote>
<p>*<em>描述: *</em></p>
<p>返回 <code>A</code> 的最短的非空连续子数组的<strong>长度</strong>，该子数组的和至少为 <code>K</code> 。</p>
<p>如果没有和至少为 <code>K</code> 的非空子数组，返回 <code>-1</code> 。</p>
<ul>
<li>1 &lt;= A.length &lt;= 50000</li>
<li>-10 ^ 5 &lt;= A[i] &lt;= 10 ^ 5</li>
<li>1 &lt;= K &lt;= 10 ^ 9</li>
</ul>
<a id="more"></a>

<p><strong>实例：</strong></p>
<blockquote>
<p>输入：A = [1], K = 1<br>输出：1</p>
<p>输入：A = [1,2], K = 4<br>输出：-1</p>
<p>输入：A = [2,-1,2], K = 3</p>
<p>输出：3</p>
</blockquote>
</blockquote>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h3><p>​    第一种当然就是直接暴力搜索，不过这样的话，复杂度会直接上升到<strong>O(n*n)</strong>，但是可以通过90%的样例</p>
<p>​    代码就不写了，理解就OK</p>
<h3 id="思路2"><a href="#思路2" class="headerlink" title="思路2"></a>思路2</h3><h4 id="错误想法"><a href="#错误想法" class="headerlink" title="错误想法"></a>错误想法</h4><p>​    除了暴力搜索的方案之外，我还想到，用两个指针同向而行，这两个指针之间确定了一个子数组，先移动右指针，每当满足条件，我们就试着移动左指针，到条件不满足就停止，就好像一个 <strong>滑动窗口</strong> 一样，但是这个做法其实是错误的！</p>
<p>​    比如测试样例为 <code>[1,-100,1,2] 3</code>，如果按上述方法来做，会找不到答案。原因在于，你无法确定这两个指针当中，是否存在有符合条件的窗口</p>
<h4 id="继续思考"><a href="#继续思考" class="headerlink" title="继续思考"></a>继续思考</h4><p>​    我们每遍历到数组当中的一个位置，往回看怎样才能清楚前面哪个区间是符合条件的呢？把前面的位置再重新遍历一遍？那这就又回到了我们前面的暴力方法，肯定不是。</p>
<p>​    换句话说我们要根据条件考虑前面的位置，这个考虑是在遍历的时候就考虑，而不用我们从头再去重复劳动，一开始我想到了队列，但是这个其实不准确，严格来说是 <strong>单调双端队列</strong>，也就是说这个队列头尾都可以出，而且里面存的元素是单调递增或者递减的，这有个什么好处呢？</p>
<p>​    想法的核心在于：假如说我们当前考虑位置 i，这时区间 <code>[0, i]</code> 的值比区间 <code>[0, i - 1]</code> 的还要小，那么对于后面的位置，我们其实就不需要考虑了 i - 1 了，因为位置 <code>sum[n] - sum[i] &gt; sum[n] - sum[i - 1]</code>，而且就长度来说的话 <code>[i, n]</code> 比 <code>[i - 1, n]</code> 更短，因此我们可以把 i - 1 这个位置踢出队列。</p>
<p>​    换句话说，也就是如果数组里面都是正数，那么长度越长，区间和肯定越大，则 sums[i] 一定大于所有双向队列中的区间和，但由于可能存在负数，从而使得长度变长，区间总和反而减少了，所以如果出现上面这种情况直接将 <code>i - 1</code> 这个位置踢出队列即可。</p>
<p>​    我们从队列中最小的位置开始计算，如果符合条件，我们就记录答案，并将这个位置踢出队列，道理很简单，再往后遍历不可能会有比这个还要小的符合条件的长度。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><p>这是我自己写的代码，调了我一整个上午，用数组来进行实现，最终通过。</p>
<p>但是还是麻烦了一点，尽管内存消耗少于<strong>100%</strong>的代码【骄傲.jpg</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">shortestSubarray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; A, <span class="keyword">int</span> K)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; add;</span><br><span class="line">        <span class="keyword">int</span> a[<span class="number">50005</span>];</span><br><span class="line">        <span class="keyword">int</span> head, tail;</span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">min</span>=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> temp_min=<span class="number">-1</span>;</span><br><span class="line">        head = tail = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span>(a));</span><br><span class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (sum &lt; K &amp;&amp; cnt&lt;A.<span class="built_in">size</span>())</span><br><span class="line">            sum += A[cnt++];</span><br><span class="line">        <span class="keyword">if</span> (sum &gt;= K)</span><br><span class="line">            temp_min = cnt;</span><br><span class="line">        add.push_back(A[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;A.<span class="built_in">size</span>(); i++)</span><br><span class="line">            add.push_back(A[i]+add[i<span class="number">-1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;add.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">while</span> (head&lt;=tail &amp;&amp; add[a[tail]]&gt;=add[i] &amp;&amp; a[tail]&lt;=i)</span><br><span class="line">                tail--;</span><br><span class="line">            a[++tail] = i;</span><br><span class="line">            <span class="keyword">while</span> (add[a[head]]&gt;=add[a[head+<span class="number">1</span>]] &amp;&amp; a[head]&lt;a[head+<span class="number">1</span>] &amp;&amp; head&lt;tail)</span><br><span class="line">                head++;</span><br><span class="line">            <span class="keyword">while</span> (add[a[tail]] - add[a[head]] &gt;= K &amp;&amp; head&lt;tail &amp;&amp; add[a[tail]] - add[a[head+<span class="number">1</span>]] &gt;= K)</span><br><span class="line">                head++;</span><br><span class="line">            <span class="keyword">if</span> (add[a[tail]] - add[a[head]] &gt;= K)&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">min</span> &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span> (a[tail]-a[head] &lt; <span class="built_in">min</span>)</span><br><span class="line">                        <span class="built_in">min</span> = a[tail] - a[head];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="built_in">min</span> = a[tail] - a[head];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">min</span>==<span class="number">-1</span> &amp;&amp; temp_min!=<span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">return</span> temp_min;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">min</span>!=<span class="number">-1</span> &amp;&amp; temp_min!=<span class="number">-1</span> &amp;&amp; temp_min&lt;<span class="built_in">min</span>)</span><br><span class="line">            <span class="keyword">return</span> temp_min;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h3><p>嗯，我找了一下，这份代码比我的就简单很多了，赶紧学习一个！</p>
<p>没想到能直接用deque（我都不知道这东西【太菜了.jpg</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">shortestSubarray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; A, <span class="keyword">int</span> K)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum[<span class="number">50005</span>];</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">2e9</span>;</span><br><span class="line">        <span class="keyword">int</span> n = A.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            sum[i+<span class="number">1</span>] = sum[i] + A[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;que;</span><br><span class="line">        que.push_back(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span>(que.<span class="built_in">size</span>() <span class="keyword">and</span> sum[i] &lt;= sum[que.back()])</span><br><span class="line">                que.pop_back();</span><br><span class="line">            <span class="keyword">while</span>(que.<span class="built_in">size</span>() <span class="keyword">and</span> sum[i] - sum[que.front()] &gt;= K) &#123;</span><br><span class="line">                ret = <span class="built_in">min</span>(ret, i - que.front());</span><br><span class="line">                que.pop_front();</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            que.push_back(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ret == <span class="number">2e9</span>) ret = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="代码3"><a href="#代码3" class="headerlink" title="代码3"></a>代码3</h3><p>这个就更厉害了，赶紧膜一下！</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">auto</span> __ = []()&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">shortestSubarray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; A, <span class="keyword">int</span> K)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = A.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>, <span class="built_in">begin</span> = <span class="number">0</span>, res = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (A[i] &gt;= K) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            sum += A[i];</span><br><span class="line">            <span class="keyword">if</span> (sum &lt; <span class="number">1</span>) &#123;</span><br><span class="line">                sum = <span class="number">0</span>;</span><br><span class="line">                <span class="built_in">begin</span> = i + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i - <span class="number">1</span>; A[j + <span class="number">1</span>] &lt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">                A[j] = A[j + <span class="number">1</span>] + A[j];</span><br><span class="line">                A[j + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (sum &gt;= K) &#123;</span><br><span class="line">                <span class="keyword">while</span> (sum - A[<span class="built_in">begin</span>] &gt;= K || A[<span class="built_in">begin</span>] &lt;= <span class="number">0</span>)</span><br><span class="line">                    sum -= A[<span class="built_in">begin</span>++];</span><br><span class="line">                <span class="keyword">int</span> length = i - <span class="built_in">begin</span> + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (res &lt; <span class="number">0</span> || res &gt; length)</span><br><span class="line">                    res = length;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>刷OJ</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode-P239</title>
    <url>/2020/04/25/LeetCode-P239/</url>
    <content><![CDATA[<h2 id="题目简介"><a href="#题目简介" class="headerlink" title="题目简介"></a>题目简介</h2><blockquote>
<p>*<em>描述: *</em></p>
<p>给定一个数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k 个数字。滑动窗口每次只向右移动一位。</p>
<p>返回滑动窗口中的最大值。</p>
<ul>
<li>1 &lt;= nums.length &lt;= 10^5</li>
<li>-10^4 &lt;= nums[i] &lt;= 10^4</li>
<li>1 &lt;= k &lt;= nums.lengt`</li>
</ul>
<a id="more"></a>

<p><strong>实例：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">nums &#x3D; [1,3,-1,-3,5,3,6,7] k &#x3D; 3</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">[3,3,5,5,6,7] </span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h3><p>最直接的想法当然是直接暴力解决就可以，复杂度为<strong>O(n*k)</strong>，但是无法通过所有的样例</p>
<p><strong>代码：</strong>（我没有检查对不对，作为参考即可）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">maxSlidingWindow</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;num.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">          <span class="keyword">int</span> <span class="built_in">max</span> = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;k; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i+k] &gt; <span class="built_in">max</span>)</span><br><span class="line">              <span class="built_in">max</span> = nums[i+k];</span><br><span class="line">          &#125;</span><br><span class="line">          res.push_back(<span class="built_in">max</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="思路2"><a href="#思路2" class="headerlink" title="思路2"></a>思路2</h3><p>​    很显然，思路1当中进行了大量重复工作，除了开头k-1个和结尾k-1个数之外，每个数都进行了k次比较，而题中100%的数据为n&lt;100000 ，当k稍大的情况下，显然会 TLE。</p>
<p>​    所以这里我们就可以使用单调队列了，根据chr同学所说，这是单调队列的经典题目。</p>
<p>​    有了上面 “单调队列” 的概念，很容易想到用单调队列进行优化。</p>
<p>​    要求的是每连续的k个数中的最大（最小）值，很明显，当一个数进入所要 “寻找” 最大值的范围中时，若这个数比其前面（先进队）的数要大，显然，前面的数会比这个数先出队且不再可能是最大值。</p>
<p>   也就是说——当满足以上条件时，可将前面的数 “弹出”，再将该数真正 push 进队尾。</p>
<p>​    这就相当于维护了一个递减的队列，符合单调队列的定义，减少了重复的比较次数，不仅如此，由于维护出的队伍是查询范围内的且是递减的，队头必定是该查询区域内的最大值，因此输出时只需输出队头即可。</p>
<p>​    显而易见的是，在这样的算法中，每个数只要进队与出队各一次，因此时间复杂度被降到了<strong>O(n)</strong> 。</p>
<p>​    而由于查询区间长度是固定的，超出查询空间的值再大也不能输出，因此还需要 site 数组记录第i个队中的数在原数组中的位置，以弹出越界的队头。</p>
<p>​    这样的话，接下来的实现就会很简单了</p>
<p><strong>代码：</strong>（已经过了）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">maxSlidingWindow</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">int</span> head=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> tail=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> a[<span class="number">50005</span>];</span><br><span class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span>(a));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;k<span class="number">-1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">while</span> (head&lt;=tail &amp;&amp; nums[a[tail]]&lt;=nums[i])</span><br><span class="line">                tail--;</span><br><span class="line">            a[++tail] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=k<span class="number">-1</span>; i&lt;nums.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">while</span> ((head&lt;=tail) &amp;&amp; (nums[a[tail]]&lt;=nums[i]))</span><br><span class="line">                tail--;</span><br><span class="line">            a[++tail] = i;</span><br><span class="line">            <span class="keyword">while</span> (a[head] &lt;= i-k)</span><br><span class="line">                head++;</span><br><span class="line">            res.push_back(nums[a[head]]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h2 id="Think"><a href="#Think" class="headerlink" title="Think."></a>Think.</h2><p>​    嗯，我其实做这个题目的时候，想到说如果记录下每一个k区间的数的第1大和第2大的数，这样向右移动的时候，就会进行比较，然后作出判断。但是flaw显而易见，因为这俩都会出问题，如果出问题的话，讨论就会很麻烦很麻烦，而且只记录这俩完全不够的。</p>
<p>​    所以，其实想一想，就发现这个单调队列是帮我们做了这件事情，并且还做了筛选，嗯 有点意思。</p>
]]></content>
      <categories>
        <category>刷OJ</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>Vijos--4.23</title>
    <url>/2020/04/23/Viijos%20--%204-23/</url>
    <content><![CDATA[<h2 id="P1282-amp-P1131-amp-P1090-amp-P1307-amp-P1095"><a href="#P1282-amp-P1131-amp-P1090-amp-P1307-amp-P1095" class="headerlink" title="P1282 &amp; P1131 &amp; P1090 &amp; P1307 &amp; P1095"></a>P1282 &amp; P1131 &amp; P1090 &amp; P1307 &amp; P1095</h2><h3 id="P1282"><a href="#P1282" class="headerlink" title="P1282"></a>P1282</h3><blockquote>
<p>*<em>描述: *</em></p>
<p>一共有n个人（以1–n编号）向佳佳要照片，而佳佳只能把照片给其中的k个人。佳佳按照与他们的关系好坏的程度给每个人赋予了一个初始权值W[i]。然后将初始权值从大到小进行排序，每人就有了一个序号D[i]（取值同样是1–n）。按照这个序号对10取模的值将这些人分为10类。也就是说定义每个人的类别序号C[i]的值为(D[i]-1) mod 10 +1，显然类别序号的取值为1–10。第i类的人将会额外得到E[i]的权值。你需要做的就是求出加上额外权值以后，最终的权值最大的k个人，并输出他们的编号。在排序中，如果两人的W[i]相同，编号小的优先。</p>
<p>n&lt;=50 000，k&lt;=2000，给出的所有正整数都不超过32767。</p>
<a id="more"></a>

<p><strong>输入:</strong></p>
<p>第一行输出用空格隔开的两个整数，分别是n和k。</p>
<p>第二行给出了10个正整数，分别是E[1]到E[10]。</p>
<p>第三行给出了n个正整数，第i个数表示编号为i的人的权值W[i]。</p>
<p><strong>输出:</strong></p>
<p>只需输出一行用空格隔开的k个整数，分别表示最终的W[i]从高到低的人的编号。</p>
<p><strong>实例：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">10 10</span><br><span class="line">1 2 3 4 5 6 7 8 9 10</span><br><span class="line">2 4 6 8 10 12 14 16 18 20</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">10 9 8 7 6 5 4 3 2 1</span><br></pre></td></tr></table></figure>
</blockquote>
<ul>
<li>这题其实很水，关键是知道结构体数组的排序怎么写，然后判断一下就OK了</li>
</ul>
<p><strong>代码：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 50005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="keyword">int</span> E[MAX];</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Person</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">int</span> W;</span><br><span class="line">    <span class="keyword">int</span> D;</span><br><span class="line">    <span class="keyword">int</span> C;</span><br><span class="line">&#125;P;</span><br><span class="line">P people[MAX];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp1</span><span class="params">(<span class="keyword">const</span> P &amp;a, <span class="keyword">const</span> P &amp;b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.W != b.W)</span><br><span class="line">        <span class="keyword">return</span> a.W &gt; b.W;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> a.num &lt; b.num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">10</span>; i++)</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; E[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; people[i].W;</span><br><span class="line">        people[i].num = i;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(people+<span class="number">1</span>, people+n+<span class="number">1</span>, cmp1);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">        people[i].C = (i<span class="number">-1</span>) % <span class="number">10</span> +<span class="number">1</span>;</span><br><span class="line">        people[i].W += E[people[i].C];</span><br><span class="line">    &#125;</span><br><span class="line">    sort(people+<span class="number">1</span>, people+n+<span class="number">1</span>, cmp1);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=k; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (i&lt;=k<span class="number">-1</span>)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;people[i].num&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;people[i].num&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="P1131"><a href="#P1131" class="headerlink" title="P1131"></a>P1131</h3><blockquote>
<p>*<em>描述: *</em></p>
<p>输入二个正整数x0,y0(2≤x0≤100000，2≤y0≤1000000)，求出满足下列条件的P、Q的个数。</p>
<p>条件:1.P、Q是正整数<br>2.要求P、Q以xO为最大公约数，以yO为最小公倍数。</p>
<p>试求，满足条件的所有可能的两个正整数的个数。</p>
<p><strong>输入:</strong></p>
<p>两个正整数</p>
<p><strong>输出:</strong></p>
<p>满足条件的所有可能的两个正整数的个数</p>
<p><strong>实例：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">3 60</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">4</span><br></pre></td></tr></table></figure>
</blockquote>
<ul>
<li>这题关键是需要利用LMD和GCD之间的关系，LMD=(ai*aj)/GCD，使用LMD除以GCD之后，寻找互质的ai和aj即可；</li>
<li>但是这题非常的水，我只用了改变步长的方式就可以直接完成</li>
</ul>
<p><strong>代码：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 50005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Max_Com_Divisor</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (x * y)&#123;</span><br><span class="line">        <span class="keyword">if</span> (x &gt; y)<span class="comment">//将较大数模较小数的结果（余数）赋给较大的值，直到两个数相等</span></span><br><span class="line">            x %= y;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x &lt; y)</span><br><span class="line">            y %= x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x &gt; y ? x : y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=x; i&lt;=y; i+=x)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=i+x; j&lt;=y; j+=x) &#123;</span><br><span class="line">            <span class="keyword">int</span> max_com_div = Max_Com_Divisor(i,j);</span><br><span class="line">            <span class="keyword">int</span> min_com_mult = (i * j)/max_com_div;</span><br><span class="line">            <span class="keyword">if</span> (max_com_div==x &amp;&amp; min_com_mult==y)</span><br><span class="line">                res++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="number">2</span>*res&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="P1282-1"><a href="#P1282-1" class="headerlink" title="P1282"></a>P1282</h3><blockquote>
<p>*<em>描述: *</em></p>
<p>有n个正整数排成一行。你的目的是要从中取出一个或连续的若干个数，使它们的和能够被k整除。</p>
<p>例如，有6个正整数，它们依次为1、2、6、3、7、4。若k=3，则你可以取出1、2、6，或者2、6、3、7，也可以仅仅取出一个6或者3使你所取的数之和能被3整除。当然，满足要求的取法不止以上这4种。事实上，一共有7种取法满足要求。</p>
<p>给定n和k，以及这n个数。你的任务就是确定，从这n个数中取出其中一个数或者若干连续的数使它们的和能被k整除有多少方法。</p>
<p>由于取法可能很多，因此你只需要输出它mod 1234567的值即可。</p>
<p><strong>输入:</strong></p>
<p>第一行有两个正整数，分别代表n和k。输入数据保证有n&lt;=500 000，k&lt;=100 000。</p>
<p>以下n行每行一个正整数。这些正整数保证都不大于10 000。</p>
<p><strong>输出:</strong></p>
<p>一个正整数。它应该是你的答案mod 1234567的结果。</p>
<p><strong>实例：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">6 3</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">6</span><br><span class="line">3</span><br><span class="line">7</span><br><span class="line">4</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">7</span><br></pre></td></tr></table></figure>
</blockquote>
<ul>
<li>这题我开始觉得很难，因为毕竟不能直接用n^2来做。但是经过bzb大神指点，发现其实很简单；</li>
<li>算法课上李清勇说过，枚举，你要么改变枚举的对象，要么改变枚举的过程；</li>
<li>那这一题就是改变枚举的对象，因为最后都是模k，所以如果结果都模k的话，就在0-&gt;k-1之间，就会比较容易搞定了；</li>
<li>具体的思路就是，假设Sn=a1+…+an，那么如果中间有一段满足要求的话，必然要求Si和Sj之差为k的倍数。因此，如果直接将每一个Si都模k之后，直接寻找有多少组一样的即可，比如多少组为0……多少组为k-1，利用数组统计即可，毕竟都可以直接进行计算Cij什么的对吧。</li>
</ul>
<p><strong>代码：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 500005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> k;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> res[MAX];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> a[MAX];</span><br><span class="line"><span class="keyword">int</span> ticket[MAX];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    res[<span class="number">0</span>] = a[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; i++)</span><br><span class="line">        res[i] = res[i<span class="number">-1</span>] + a[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        res[i] = res[i] % k;</span><br><span class="line">        ticket[res[i]]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> sum = ticket[<span class="number">0</span>] % <span class="number">1234567</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;k; ++i)&#123;</span><br><span class="line">        sum += ticket[i] * (ticket[i] - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        sum = sum % <span class="number">1234567</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="P1307"><a href="#P1307" class="headerlink" title="P1307"></a>P1307</h3><blockquote>
<p>*<em>描述: *</em></p>
<p>一天他不务正业出去耍，看见街上的地板是由很多小的正方形组成，顿时心里突发奇想想要总结一下到底有多少正方形。。。。</p>
<p>于是乎，他狠下心数了数，终于翻山越岭知道了正方形的总边长为N，你的目的是找出在可以组成的每个至少边为1的正方形的个数。(因为黑皮太笨了，无法找到)。。</p>
<p><strong>输入:</strong></p>
<p>自然数(0&lt;=n&lt;=32767)</p>
<p><strong>输出:</strong></p>
<p>一个数，即正方形的总数</p>
<p><strong>实例：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">2</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">5</span><br></pre></td></tr></table></figure>
</blockquote>
<ul>
<li>这题水到不像话，直接1^2+…+n^2即可（为什么我做的都是水题，废话，因为我菜啊）</li>
</ul>
<p><strong>代码：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 500005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> sum;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">        sum += i * i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="P1095"><a href="#P1095" class="headerlink" title="P1095"></a>P1095</h3><blockquote>
<p>*<em>描述: *</em></p>
<p>n个人排成一圈。从某个人开始，按顺时针方向依次编号。从编号为1的人开始顺时针“一二一”报数，报到2的人退出圈子。这样不断循环下去，圈子里的人将不断减少。由于人的个数是有限的，因此最终会剩下一个人。试问最后剩下的人最开始的编号。</p>
<p><strong>输入:</strong></p>
<p>一个正整数n，表示人的个数。输入数据保证数字n不超过100位。</p>
<p><strong>输出:</strong></p>
<p>一个正整数。它表示经过“一二一”报数后最后剩下的人的编号。</p>
<p><strong>实例：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">9</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">3</span><br></pre></td></tr></table></figure>
</blockquote>
<ul>
<li><p>这题就相当的有意思了，如果直接读的话肯定不行的，因为n有高达100位，所以你需要使用高精度运算，你得自己去写，就非常非常麻烦；</p>
</li>
<li><p>但是！！如果你愿意计算的话，你会发现结果非常的优美11313513579….；</p>
</li>
<li><p>看出规律了吗？</p>
<blockquote>
<p>1</p>
<p>13</p>
<p>135</p>
<p>1357</p>
<p>……</p>
</blockquote>
</li>
<li><p>是不是惊呆了！我也是。</p>
</li>
<li><p>接下来，两行代码就搞定！</p>
</li>
</ul>
<p><strong>代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = int(input())</span><br><span class="line">print(int(bin(n).replace(<span class="string">'1'</span>,<span class="string">'0'</span>,<span class="number">1</span>), <span class="number">2</span>)&lt;&lt;<span class="number">1</span>|<span class="number">1</span>)</span><br></pre></td></tr></table></figure>



<h2 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h2><p>关于约瑟夫环问题，我认真的看了一下，觉得非常优美，我决定记录一下</p>
<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><pre><code>&gt;约瑟夫问题是个著名的问题：N个人围成一圈，第一个人从1开始报数，报M的将被杀掉，下一个人接着从1开始报。如此反复，最后剩下一个，求最后的胜利者。
&gt;例如只有三个人，把他们叫做A、B、C，他们围成一圈，从A开始报数，假设报2的人被杀掉。
&gt;
&gt;​    首先A开始报数，他报1。侥幸逃过一劫。
&gt;​    然后轮到B报数，他报2。非常惨，他被杀了
&gt;​    C接着从1开始报数
&gt;​    接着轮到A报数，他报2。也被杀死了。
&gt;​    最终胜利者是C</code></pre><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="普通方案"><a href="#普通方案" class="headerlink" title="普通方案"></a>普通方案</h4><p>​    刚学数据结构的时候，我们可能用链表的方法去模拟这个过程，N个人看作是N个链表节点，节点1指向节点2，节点2指向节点3，……，节点N-1指向节点N，节点N指向节点1，这样就形成了一个环。然后从节点1开始1、2、3……往下报数，每报到M，就把那个节点从环上删除。下一个节点接着从1开始报数。最终链表仅剩一个节点。它就是最终的胜利者。</p>
<img src= "/img/loading.gif" data-lazy-src="https://tva1.sinaimg.cn/large/007S8ZIlly1ge44dmtnuuj30jg0dmwf1.jpg" width = "300" height = "200" alt="图片名称" align=center />

<h4 id="递推"><a href="#递推" class="headerlink" title="递推"></a>递推</h4><p>约瑟夫环是一个经典的数学问题，我们不难发现这样的依次报数，似乎有规律可循。为了方便导出递推式，我们重新定义一下题目。<br>问题： N个人编号为1，2，……，N，依次报数，每报到M时，杀掉那个人，求最后胜利者的编号。</p>
<p>这边我们先把结论抛出了。之后带领大家一步一步的理解这个公式是什么来的。<br>递推公式：</p>
<p>​                                                                    <strong>F(N,M)=(F(N−1,M)+M)%N</strong></p>
<ul>
<li>F(N,M)表示，N个人报数，每报到M时杀掉那个人，最终胜利者的编号</li>
<li>F(N−1,M)表示，N-1个人报数，每报到M时杀掉那个人，最终胜利者的编号</li>
</ul>
<h4 id="解释一下"><a href="#解释一下" class="headerlink" title="解释一下"></a>解释一下</h4><p><strong>问题1：</strong>假设我们已经知道11个人时，胜利者的下标位置为6。那下一轮10个人时，胜利者的下标位置为多少？<br><strong>答：</strong>其实吧，第一轮删掉编号为3的人后，之后的人都往前面移动了3位，胜利这也往前移动了3位，所以他的下标位置由6变成3。</p>
<p><strong>问题2：</strong>假设我们已经知道10个人时，胜利者的下标位置为3。那下一轮11个人时，胜利者的下标位置为多少？<br><strong>答：</strong>这可以看错是上一个问题的逆过程，大家都往后移动3位，所以f(11,3)=f(10,3)+3<br>f(11,3)=f(10,3)+3。不过有可能数组会越界，所以最后模上当前人数的个数，f(11,3)=（f(10,3)+3）%11<br>f(11,3)=（f(10,3)+3）%11</p>
<p><strong>问题3：</strong>现在改为人数改为N，报到M时，把那个人杀掉，那么数组是怎么移动的？<br><strong>答：</strong>每杀掉一个人，下一个人成为头，相当于把数组向前移动M位。若已知N-1个人时，胜利者的下标位置位f(N−1,M)<br>f(N−1,M)，则N个人的时候，就是往后移动M为，(因为有可能数组越界，超过的部分会被接到头上，所以还要模N)，既f(N,M)=(f(N−1,M)+M)%n<br>f(N,M)=(f(N−1,M)+M)%n</p>
<p><strong>注：</strong>理解这个递推式的核心在于关注胜利者的下标位置是怎么变的。每杀掉一个人，其实就是把这个数组向前移动了M位。然后逆过来，就可以得到这个递推式。</p>
<p>是不是有点明白了？</p>
<p>再上一张图，就更明白了：</p>
<img src= "/img/loading.gif" data-lazy-src="https://tva1.sinaimg.cn/large/007S8ZIlly1ge44icek00j30vw0jidhk.jpg" style="zoom:40%" />

<p>忽略绿色的一行，黄色的表示要被杀的，每一行表示现在存在的人的编号</p>
<p>如果将上面表格的每一行看成数组，这个公式描述的是：幸存者在这一轮的下标位置</p>
<ul>
<li>F(1,3)：只有1个人了，那个人就是获胜者，他的下标位置是0F(2,3)=(F(1,3)+3)%2=3%2=1</li>
<li>F(2,3)=(F(1,3)+3)%2=3%2=1：在有2个人的时候，胜利者的下标位置为1</li>
<li>F(3,3)=(F(2,3)+3)%3=4%3=1：在有3个人的时候，胜利者的下标位置为1</li>
<li>F(4,3)=(F(3,3)+3)%4=4%4=0：在有4个人的时候，胜利者的下标位置为0<br>……</li>
<li>F(11,3)=6</li>
<li>F(11,3)=6</li>
</ul>
<p>怎么样，是不是很清晰了？</p>
]]></content>
      <categories>
        <category>刷OJ</category>
      </categories>
      <tags>
        <tag>Vijos</tag>
      </tags>
  </entry>
  <entry>
    <title>正则文法与上下文无关文法</title>
    <url>/2020/04/14/%E6%AD%A3%E5%88%99%E6%96%87%E6%B3%95%E4%B8%8E%E4%B8%8A%E4%B8%8B%E6%96%87%E6%97%A0%E5%85%B3%E6%96%87%E6%B3%95/</url>
    <content><![CDATA[<h2 id="正则文法"><a href="#正则文法" class="headerlink" title="正则文法"></a>正则文法</h2><p>有时一个正则表达式很复杂，我们希望能够把这个正则表达式用记号记下来，以便以后使用，于是就有了正则定义（Regular Definitions）：<br>设Σ是符号表，如果有一系列的定义：<br>    d1 → r1<br>    d2 → r2<br>        …<br>    dn→ rn<br>并且：<br>    任一个di都是一个新的符号，它既不属于Σ，也不属于{d1,d2,d3,…,d(i-1)}<br>    任一个ri都是一个正则表达式，能够由符号表Σ以及{d1,d2,d3,…,d(i-1)}所表示<br>这样就构成了一组正则表达式定义。</p>
<a id="more"></a>



<h2 id="上下文无关文法"><a href="#上下文无关文法" class="headerlink" title="上下文无关文法"></a>上下文无关文法</h2><p><strong>组成要素：</strong></p>
<ul>
<li>一个终结符的有限集（A set of terminal symbols），构成文法的最基本的字符就是这个文法的终结符，例如- 一个能够产生个位数的文法规则digit –&gt; 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9，则数字0～9就是这个文法的终结符，一个能够产生变量名的文法规则variable –&gt; (‘A’-‘Z’ | ‘a’-‘z’) *((‘A’-‘Z’ | ‘a’-‘z’ | ‘0’-‘9’)，则所有的英文字母和数字就是文法的终结符。</li>
<li>一个非终结符的有限集（A set of nonterminals），例如上面的digit、variable就是非终结符。</li>
<li>一个产生式的有限集，例如上面的“digit –&gt; …”和“variable –&gt; …”两个规则可以构成一个产生式集</li>
<li>一个非终结符作为开始符号，在非终结符集中，必须指定其中一个作为开始符号。</li>
</ul>
<p>几个问题：</p>
<ol>
<li><p><strong>为什么是“上下文无关”而不是“上下文有关”呢？</strong></p>
<blockquote>
<p>这是因为在利用一个上下文无关文法生成语言的时候，我们可以随意将文法规则左边的非终结符派生（更换）为右边的终结符或非终结符</p>
</blockquote>
</li>
</ol>
<ol start="2">
<li><p><strong>正则文法和上下文无关文法的区别？</strong></p>
<blockquote>
<p> 在正则定义中是不允许递归定义的。例如A → aA|b不是一个正则定义，为其左边的A必须是一个新的符号，也就是说不能在其他地方定义过，但是其右边要求每一个符号都是定义过的，因此这个定义无法满足。而上下文无关文法则没有这个约束，因此A → aA|b是一个上下文无关文法的产生式，但不是正则定义的定义式。</p>
</blockquote>
</li>
</ol>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>编译原理</tag>
      </tags>
  </entry>
  <entry>
    <title>各种工具站</title>
    <url>/2020/04/10/%E5%90%84%E7%A7%8D%E5%B7%A5%E5%85%B7%E7%AB%99/</url>
    <content><![CDATA[<h2 id="YouTube"><a href="#YouTube" class="headerlink" title="YouTube"></a>YouTube</h2><ul>
<li><strong>YouTube视频下载</strong><ul>
<li>如果能翻墙的话：<a href="https://www.y2mate.com/convert-youtube/cxNWXxBoaHg" target="_blank" rel="noopener">y2mate</a>，<a href="https://www.findyoutube.net/" target="_blank" rel="noopener">findYouTube</a></li>
<li>不能翻墙的话。。。暂时还没找到</li>
</ul>
</li>
</ul>
<a id="more"></a>

<ul>
<li><strong>YouTube字幕下载</strong><ul>
<li><a href="https://zhuwei.me/y2b/" target="_blank" rel="noopener">zhuwei</a>（可以选择多种格式的字幕文件）</li>
</ul>
</li>
</ul>
<h2 id="字幕"><a href="#字幕" class="headerlink" title="字幕"></a>字幕</h2><ul>
<li><strong>字幕格式转换</strong><ul>
<li><a href="[http://convert.4get.kr/zh/convert/ass/%E8%AF%B7%E5%85%88%E9%80%89%E6%8B%A9%E5%AD%97%E5%B9%95%E6%96%87%E4%BB%B6%E3%80%82](http://convert.4get.kr/zh/convert/ass/请先选择字幕文件。)">Convert/4get</a></li>
</ul>
</li>
</ul>
<h2 id="百度文库"><a href="#百度文库" class="headerlink" title="百度文库"></a>百度文库</h2><ul>
<li><strong>百度文库下载</strong><ul>
<li>30文库，免费的一天只有两篇<ul>
<li>先在<a href="http://www.yaersen.com" target="_blank" rel="noopener">这里</a>拿到注册账号</li>
<li>然后在<a href="http://wkwk.sanshi30.cn" target="_blank" rel="noopener">这里</a>输入之后进行下载</li>
<li>OK👌</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="公众号"><a href="#公众号" class="headerlink" title="公众号"></a>公众号</h2><ul>
<li><strong>Markdown写公众号</strong><ul>
<li><a href="http://blog.didispace.com/tools/online-markdown/" target="_blank" rel="noopener">我也不知道叫啥</a> 感觉还是Markdown比较舒适</li>
<li><a href="http://md.aclickall.com" target="_blank" rel="noopener">Md2All</a> 和上面类似，风格不同</li>
</ul>
</li>
</ul>
<h2 id="PPT相关"><a href="#PPT相关" class="headerlink" title="PPT相关"></a>PPT相关</h2><ul>
<li><p><strong>ppt模板下载</strong></p>
<ul>
<li><a href="http://www.ypppt.com" target="_blank" rel="noopener">yppt</a> 免费的模板下载！</li>
</ul>
</li>
<li><p><strong>ppt导航站</strong></p>
<ul>
<li><a href="http://www.hippter.com" target="_blank" rel="noopener">HiPPTer</a> 这真的是见过的最全导航站了，我感觉这个大类可以删了只留这一个了</li>
</ul>
</li>
</ul>
<h2 id="统计数据"><a href="#统计数据" class="headerlink" title="统计数据"></a>统计数据</h2><ul>
<li><a href="https://zh.tradingeconomics.com" target="_blank" rel="noopener">Trade Economics</a> 各个国家的经济数据</li>
<li><a href="https://cn.knoema.com/atlas" target="_blank" rel="noopener">Knoema</a> 这个比较分散，各个方面都有，但是每一个方面不是特别详细</li>
</ul>
<h2 id="看剧"><a href="#看剧" class="headerlink" title="看剧"></a>看剧</h2><ul>
<li><strong>美剧</strong><ul>
<li><a href="https://91mjw.com" target="_blank" rel="noopener">91美剧网</a></li>
<li><a href="https://www.meiju11.com/new/" target="_blank" rel="noopener">爱美剧</a></li>
<li><a href="http://www.ttkmj.org/" target="_blank" rel="noopener">天天美剧</a></li>
</ul>
</li>
</ul>
<h2 id="镜像网站"><a href="#镜像网站" class="headerlink" title="镜像网站"></a>镜像网站</h2><ul>
<li><strong>谷歌镜像</strong><ul>
<li><a href="https://g.luciaz.me/" target="_blank" rel="noopener">浙大的镜像</a> 问题答案：心灵之约 水朝夕 csxy@123</li>
<li><a href="https://nav.hiqq.com.cn/twy/" target="_blank" rel="noopener">HiQQ</a></li>
<li><a href="https://app.group-purchasing.com/web" target="_blank" rel="noopener">我也不知道叫什么名字-1</a></li>
<li><a href="https://googles.now.sh" target="_blank" rel="noopener">我也不知道叫什么名字-2</a></li>
<li><a href="https://app.essclick.com/web" target="_blank" rel="noopener">我也不知道叫什么名字-3</a></li>
</ul>
</li>
</ul>
<h2 id="电子书"><a href="#电子书" class="headerlink" title="电子书"></a>电子书</h2><ul>
<li><strong>教材</strong><ul>
<li><a href="http://freecomputerbooks.com/langCBooks.html" target="_blank" rel="noopener">FreeComputerBooks</a> 专注于计算机、变成、数学、电子工程、软件工程等技术书籍的网站</li>
</ul>
</li>
</ul>
<h2 id="格式转换"><a href="#格式转换" class="headerlink" title="格式转换"></a>格式转换</h2><ul>
<li><a href="https://cn.office-converter.com" target="_blank" rel="noopener">格式转换大全</a> office文档格式、视频格式、音频格式、图片格式、电子书格式……各种都有</li>
</ul>
<h2 id="音乐下载"><a href="#音乐下载" class="headerlink" title="音乐下载"></a>音乐下载</h2><p>貌似音乐下载已经开始变成一件很难的事情了，查了查发现还是有挺多网站的</p>
<ul>
<li><a href="http://music.ifkdy.com" target="_blank" rel="noopener">疯狂音乐下载</a> 疯狂音乐搜索是一个支持网易、QQ、虾米、酷狗、酷我、咪咕等几十个音乐软件的搜索类网站，只要在搜索栏下输入歌曲名，会直接将搜索到的相关歌曲全部展示，然后就可以选择下载了</li>
<li><a href="https://music.sounm.com" target="_blank" rel="noopener">全网音乐免费下载工具</a> 全网音乐免费下载工具支持的音乐来源站有：QQ音乐，网易音乐，酷狗，虾米，百度， 酷我， 一听，咪咕，荔枝，蜻蜓，喜马拉雅，全民K歌等，你可以在线听歌，也可以免费下载歌曲。</li>
<li><a href="https://music.qugeek.com" target="_blank" rel="noopener">墨灵音乐</a> 墨灵音乐是一款音乐在线应用，支持在线搜索、试听、下载、歌单、收藏、同步、歌词等等，歌曲资源也是比较全面。若想要搜索音乐或免费下载免费歌曲，首先要先安装插件。插件安装完成后，才可以正常使用。</li>
<li><a href="https://www.sq688.com" target="_blank" rel="noopener">超高无损音乐</a> 超高无损音乐网站是一个提供大量音乐资源的网站，你可以搜索歌手或者歌曲名称，然后查询免费的下载资源，此站提供的下载资源一般是百度网盘链接。此网站会显示歌曲的文件类型，大小，热度，收录时间。缺点资源更新速度慢。</li>
<li><a href="http://www.acgjc.com" target="_blank" rel="noopener">漫音社</a> 漫音社是一个二次元音乐下载网站，提供了大量动漫主题音乐，你可以在此站下载免费歌曲。</li>
</ul>
<p>更多的话，参考这个<a href="https://beecut.cn/free-music-download.html" target="_blank" rel="noopener">站点</a></p>
<h2 id="杂七杂八"><a href="#杂七杂八" class="headerlink" title="杂七杂八"></a>杂七杂八</h2><ul>
<li><p><a href="http://zh.wikihow.com" target="_blank" rel="noopener">Wikihow</a> 各种乱七八糟事情的指导手册，挺好玩的</p>
</li>
<li><p><a href="http://www.planetb.ca/syntax-highlight-word" target="_blank" rel="noopener">PlanetB</a> 可以高亮代码，方便复制到word里面（虽然感觉VS code更好</p>
</li>
<li><p><a href="https://www.fosshub.com" target="_blank" rel="noopener">Fosshub</a> 各种免费工具合集</p>
</li>
<li><p><a href="https://mergeek.com/latest" target="_blank" rel="noopener">Mergeek</a> 看iOS的各种限免，最全的，没有之一！超棒！</p>
</li>
</ul>
<p>暂时先这么多，待继续更新。。。</p>
]]></content>
      <categories>
        <category>乱七八糟</category>
      </categories>
      <tags>
        <tag>站点</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo-博客搭建历程-下</title>
    <url>/2020/03/31/Hexo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%8E%86%E7%A8%8B-%E4%B8%8B/</url>
    <content><![CDATA[<h2 id="1-Valine简介"><a href="#1-Valine简介" class="headerlink" title="1 Valine简介"></a>1 Valine简介</h2><p>​    继续上次的搭建历程，主要是进行留言板的搭建，我看了不少的留言板，包括来比力、Gittalk等等，最后还是觉得Valine比较简约好看，而且查了一下，Ayer主题也支持，就决定用这个了。</p>
<a id="more"></a>

<h2 id="2-LeanCloud基本应用创建"><a href="#2-LeanCloud基本应用创建" class="headerlink" title="2 LeanCloud基本应用创建"></a>2 LeanCloud基本应用创建</h2><h3 id="2-1-注册LeanCloud"><a href="#2-1-注册LeanCloud" class="headerlink" title="2.1 注册LeanCloud"></a>2.1 注册LeanCloud</h3><p>​    首先去<a href="https://leancloud.cn/" target="_blank" rel="noopener">LeanCloud官网</a>进行注册一个账号</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://tva1.sinaimg.cn/large/00831rSTgy1gddi1ufzhnj30lq0f90tg.jpg" alt=""></p>
<h3 id="2-2-创建新的应用"><a href="#2-2-创建新的应用" class="headerlink" title="2.2 创建新的应用"></a>2.2 创建新的应用</h3><p>​    在登陆之后可以看到下图中的这样一个界面，点击红框中的“创建应用”。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://tva1.sinaimg.cn/large/00831rSTgy1gddi3bo8zzj30lp0bo0ub.jpg" alt=""></p>
<p>​    然后在弹出框中填写你要创建的名称即可，使用免费的开发版就OK了</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://tva1.sinaimg.cn/large/00831rSTly1gddi4tnx94j30lx0glgmr.jpg" alt=""></p>
<h3 id="2-3-获取应用的KEY"><a href="#2-3-获取应用的KEY" class="headerlink" title="2.3 获取应用的KEY"></a>2.3 获取应用的KEY</h3>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown语法</title>
    <url>/2020/03/26/Markdown%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><hr>
<h3 id="1-斜体和粗体"><a href="#1-斜体和粗体" class="headerlink" title="1. 斜体和粗体"></a>1. 斜体和粗体</h3><p>使用 * 和 ** 表示斜体和粗体。</p>
<p>示例：</p>
<p>这是 <em>斜体</em>，这是 <strong>粗体</strong>。</p>
<a id="more"></a>

<h3 id="2-分级标题"><a href="#2-分级标题" class="headerlink" title="2. 分级标题"></a>2. 分级标题</h3><p>使用 === 表示一级标题，使用 — 表示二级标题。</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这是一个一级标题</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">这是一个二级标题</span><br><span class="line">--------------------------------------------------</span><br><span class="line"></span><br><span class="line">### 这是一个三级标题</span><br></pre></td></tr></table></figure>

<p>你也可以选择在行首加井号表示不同级别的标题 (H1-H6)，例如：# H1, ## H2, ### H3，#### H4。</p>
<h3 id="3-外链接"><a href="#3-外链接" class="headerlink" title="3. 外链接"></a>3. 外链接</h3><p>使用 [描述](链接地址) 为文字增加外链接。</p>
<p>示例：</p>
<p>这是去往 <a href="https://mazerunner.gitee.io/" target="_blank" rel="noopener">本人博客</a> 的链接。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://n1-q.mafengwo.net/s15/M00/65/BB/CoUBGV3brtOAMKOdAAsHBZ8nyQk791.jpg?imageMogr2%2Fthumbnail%2F1360x%2Fstrip%2Fquality%2F90" alt=""></p>
<h3 id="4-无序列表"><a href="#4-无序列表" class="headerlink" title="4. 无序列表"></a>4. 无序列表</h3><p>使用 *，+，- 表示无序列表。</p>
<p>示例：</p>
<ul>
<li>无序列表项 一</li>
<li>无序列表项 二</li>
<li>无序列表项 三</li>
</ul>
<h3 id="5-有序列表"><a href="#5-有序列表" class="headerlink" title="5. 有序列表"></a>5. 有序列表</h3><p>使用数字和点表示有序列表。</p>
<p>示例：</p>
<ol>
<li>有序列表项 一</li>
<li>有序列表项 二</li>
<li>有序列表项 三</li>
</ol>
<h3 id="6-文字引用"><a href="#6-文字引用" class="headerlink" title="6. 文字引用"></a>6. 文字引用</h3><p>使用 &gt; 表示文字引用。</p>
<p>示例：</p>
<blockquote>
<p>野火烧不尽，春风吹又生。</p>
</blockquote>
<h3 id="7-行内代码块"><a href="#7-行内代码块" class="headerlink" title="7. 行内代码块"></a>7. 行内代码块</h3><p>使用 `代码` 表示行内代码块。</p>
<p>示例：</p>
<p>让我们聊聊 <code>html</code>。</p>
<h3 id="8-代码块"><a href="#8-代码块" class="headerlink" title="8.  代码块"></a>8.  代码块</h3><p>使用 四个缩进空格 表示代码块。</p>
<p>示例：</p>
<pre><code>这是一个代码块，此行左侧有四个不可见的空格。</code></pre><h3 id="9-插入图像"><a href="#9-插入图像" class="headerlink" title="9.  插入图像"></a>9.  插入图像</h3><p>使用 ![描述](图片链接地址) 插入图像。</p>
<p>示例：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://www.zybuluo.com/static/img/my_head.jpg" alt="我的头像"></p>
<h1 id="Cmd-Markdown-高阶语法手册"><a href="#Cmd-Markdown-高阶语法手册" class="headerlink" title="Cmd Markdown 高阶语法手册"></a>Cmd Markdown 高阶语法手册</h1><h3 id="1-内容目录"><a href="#1-内容目录" class="headerlink" title="1. 内容目录"></a>1. 内容目录</h3><p>在段落中填写 <code>[TOC]</code> 以显示全文内容的目录结构。</p>
<p>[TOC]</p>
<h3 id="2-标签分类"><a href="#2-标签分类" class="headerlink" title="2. 标签分类"></a>2. 标签分类</h3><p>在编辑区任意行的列首位置输入以下代码给文稿标签：</p>
<p>标签： 数学 英语 Markdown</p>
<p>或者</p>
<p>Tags： 数学 英语 Markdown</p>
<h3 id="3-删除线"><a href="#3-删除线" class="headerlink" title="3. 删除线"></a>3. 删除线</h3><p>使用 ~~ 表示删除线。</p>
<p><del>这是一段错误的文本。</del></p>
<h3 id="4-注脚"><a href="#4-注脚" class="headerlink" title="4. 注脚"></a>4. 注脚</h3><p>使用 [^keyword] 表示注脚。</p>
<p>这是一个注脚[^footnote]的样例。</p>
<p>这是第二个注脚[^footnote2]的样例。</p>
<h3 id="5-LaTeX-公式"><a href="#5-LaTeX-公式" class="headerlink" title="5. LaTeX 公式"></a>5. LaTeX 公式</h3><p>$ 表示行内公式： </p>
<p>质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。</p>
<p>$$ 表示整行公式：</p>
<p>$$\sum_{i=1}^n a_i=0$$</p>
<p>$$f(x_1,x_x,\ldots,x_n) = x_1^2 + x_2^2 + \cdots + x_n^2 $$</p>
<p>$$\sum^{j-1}<em>{k=0}{\widehat{\gamma}</em>{kj} z_k}$$</p>
<p>访问 <a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="noopener">MathJax</a> 参考更多使用方法。</p>
<h3 id="6-加强的代码块"><a href="#6-加强的代码块" class="headerlink" title="6. 加强的代码块"></a>6. 加强的代码块</h3><p>支持四十一种编程语言的语法高亮的显示，行号显示。</p>
<p>非代码示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install vim-gnome</span><br></pre></td></tr></table></figure>

<p>Python 示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@requires_authorization</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">somefunc</span><span class="params">(param1=<span class="string">''</span>, param2=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="string">'''A docstring'''</span></span><br><span class="line">    <span class="keyword">if</span> param1 &gt; param2: <span class="comment"># interesting</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Greater'</span></span><br><span class="line">    <span class="keyword">return</span> (param2 - param1 + <span class="number">1</span>) <span class="keyword">or</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>message = <span class="string">'''interpreter</span></span><br><span class="line"><span class="string"><span class="meta">... </span>prompt'''</span></span><br></pre></td></tr></table></figure>

<p>JavaScript 示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* nth element in the fibonacci series.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param </span>n &gt;= 0</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return </span>the nth element, &gt;= 0.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fib</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>, b = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> tmp;</span><br><span class="line">  <span class="keyword">while</span> (--n &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    tmp = a;</span><br><span class="line">    a += b;</span><br><span class="line">    b = tmp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.write(fib(<span class="number">10</span>));</span><br></pre></td></tr></table></figure>

<h3 id="7-流程图"><a href="#7-流程图" class="headerlink" title="7. 流程图"></a>7. 流程图</h3><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">st&#x3D;&gt;start: Start:&gt;https:&#x2F;&#x2F;www.zybuluo.com</span><br><span class="line">io&#x3D;&gt;inputoutput: verification</span><br><span class="line">op&#x3D;&gt;operation: Your Operation</span><br><span class="line">cond&#x3D;&gt;condition: Yes or No?</span><br><span class="line">sub&#x3D;&gt;subroutine: Your Subroutine</span><br><span class="line">e&#x3D;&gt;end</span><br><span class="line"></span><br><span class="line">st-&gt;io-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;sub-&gt;io</span><br></pre></td></tr></table></figure>

<h4 id="更多语法参考：流程图语法参考"><a href="#更多语法参考：流程图语法参考" class="headerlink" title="更多语法参考：流程图语法参考"></a>更多语法参考：<a href="http://adrai.github.io/flowchart.js/" target="_blank" rel="noopener">流程图语法参考</a></h4><h3 id="8-序列图"><a href="#8-序列图" class="headerlink" title="8. 序列图"></a>8. 序列图</h3><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Alice-&gt;Bob: Hello Bob, how are you?</span><br><span class="line">Note right of Bob: Bob thinks</span><br><span class="line">Bob--&gt;Alice: I am good thanks!</span><br></pre></td></tr></table></figure>

<h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Title: Here is a title</span><br><span class="line">A-&gt;B: Normal line</span><br><span class="line">B--&gt;C: Dashed line</span><br><span class="line">C-&gt;&gt;D: Open arrow</span><br><span class="line">D--&gt;&gt;A: Dashed open arrow</span><br></pre></td></tr></table></figure>

<h4 id="更多语法参考：序列图语法参考"><a href="#更多语法参考：序列图语法参考" class="headerlink" title="更多语法参考：序列图语法参考"></a>更多语法参考：<a href="http://bramp.github.io/js-sequence-diagrams/" target="_blank" rel="noopener">序列图语法参考</a></h4><h3 id="9-甘特图"><a href="#9-甘特图" class="headerlink" title="9. 甘特图"></a>9. 甘特图</h3><p>甘特图内在思想简单。基本是一条线条图，横轴表示时间，纵轴表示活动（项目），线条表示在整个期间上计划和实际的活动完成情况。它直观地表明任务计划在什么时候进行，及实际进展与计划要求的对比。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title 项目开发流程</span><br><span class="line">section 项目确定</span><br><span class="line">    需求分析       :a1, 2016-06-22, 3d</span><br><span class="line">    可行性报告     :after a1, 5d</span><br><span class="line">    概念验证       : 5d</span><br><span class="line">section 项目实施</span><br><span class="line">    概要设计      :2016-07-05  , 5d</span><br><span class="line">    详细设计      :2016-07-08, 10d</span><br><span class="line">    编码          :2016-07-15, 10d</span><br><span class="line">    测试          :2016-07-22, 5d</span><br><span class="line">section 发布验收</span><br><span class="line">    发布: 2d</span><br><span class="line">    验收: 3d</span><br></pre></td></tr></table></figure>

<h4 id="更多语法参考：甘特图语法参考"><a href="#更多语法参考：甘特图语法参考" class="headerlink" title="更多语法参考：甘特图语法参考"></a>更多语法参考：<a href="https://knsv.github.io/mermaid/#gant-diagrams" target="_blank" rel="noopener">甘特图语法参考</a></h4><h3 id="10-Mermaid-流程图"><a href="#10-Mermaid-流程图" class="headerlink" title="10. Mermaid 流程图"></a>10. Mermaid 流程图</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A[Hard edge] --&gt;|Link text| B(Round edge)</span><br><span class="line">B --&gt; C&#123;Decision&#125;</span><br><span class="line">C --&gt;|One| D[Result one]</span><br><span class="line">C --&gt;|Two| E[Result two]</span><br></pre></td></tr></table></figure>

<h4 id="更多语法参考：Mermaid-流程图语法参考"><a href="#更多语法参考：Mermaid-流程图语法参考" class="headerlink" title="更多语法参考：Mermaid 流程图语法参考"></a>更多语法参考：<a href="https://knsv.github.io/mermaid/#flowcharts-basic-syntax" target="_blank" rel="noopener">Mermaid 流程图语法参考</a></h4><h3 id="11-Mermaid-序列图"><a href="#11-Mermaid-序列图" class="headerlink" title="11. Mermaid 序列图"></a>11. Mermaid 序列图</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Alice-&gt;John: Hello John, how are you?</span><br><span class="line">loop every minute</span><br><span class="line">    John--&gt;Alice: Great!</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<h4 id="更多语法参考：Mermaid-序列图语法参考"><a href="#更多语法参考：Mermaid-序列图语法参考" class="headerlink" title="更多语法参考：Mermaid 序列图语法参考"></a>更多语法参考：<a href="https://knsv.github.io/mermaid/#sequence-diagrams" target="_blank" rel="noopener">Mermaid 序列图语法参考</a></h4><h3 id="12-表格支持"><a href="#12-表格支持" class="headerlink" title="12. 表格支持"></a>12. 表格支持</h3><table>
<thead>
<tr>
<th>项目</th>
<th align="right">价格</th>
<th align="center">数量</th>
</tr>
</thead>
<tbody><tr>
<td>计算机</td>
<td align="right">$1600</td>
<td align="center">5</td>
</tr>
<tr>
<td>手机</td>
<td align="right">$12</td>
<td align="center">12</td>
</tr>
<tr>
<td>管线</td>
<td align="right">$1</td>
<td align="center">234</td>
</tr>
</tbody></table>
<h3 id="13-定义型列表"><a href="#13-定义型列表" class="headerlink" title="13. 定义型列表"></a>13. 定义型列表</h3><dl><dt>名词 1</dt><dd>定义 1（左侧有一个可见的冒号和四个不可见的空格）</dd></dl><dl><dt>代码块 2</dt><dd>这是代码块的定义（左侧有一个可见的冒号和四个不可见的空格）</dd></dl><pre><code>代码块（左侧有八个不可见的空格）</code></pre><h3 id="14-Html-标签"><a href="#14-Html-标签" class="headerlink" title="14. Html 标签"></a>14. Html 标签</h3><p>本站支持在 Markdown 语法中嵌套 Html 标签，譬如，你可以用 Html 写一个纵跨两行的表格：</p>
<pre><code>&lt;table&gt;
    &lt;tr&gt;
        &lt;th rowspan=&quot;2&quot;&gt;值班人员&lt;/th&gt;
        &lt;th&gt;星期一&lt;/th&gt;
        &lt;th&gt;星期二&lt;/th&gt;
        &lt;th&gt;星期三&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;李强&lt;/td&gt;
        &lt;td&gt;张明&lt;/td&gt;
        &lt;td&gt;王平&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;</code></pre><table>
    <tr>
        <th rowspan="2">值班人员</th>
        <th>星期一</th>
        <th>星期二</th>
        <th>星期三</th>
    </tr>
    <tr>
        <td>李强</td>
        <td>张明</td>
        <td>王平</td>
    </tr>
</table>

<h3 id="15-内嵌图标"><a href="#15-内嵌图标" class="headerlink" title="15. 内嵌图标"></a>15. 内嵌图标</h3><p>本站的图标系统对外开放，在文档中输入</p>
<pre><code>&lt;i class=&quot;icon-weibo&quot;&gt;&lt;/i&gt;</code></pre><p>即显示微博的图标： <i class="icon-weibo icon-2x"></i></p>
<p>替换 上述 <code>i 标签</code> 内的 <code>icon-weibo</code> 以显示不同的图标，例如：</p>
<pre><code>&lt;i class=&quot;icon-renren&quot;&gt;&lt;/i&gt;</code></pre><p>即显示人人的图标： <i class="icon-renren icon-2x"></i></p>
<p>更多的图标和玩法可以参看 <a href="http://fortawesome.github.io/Font-Awesome/3.2.1/icons/" target="_blank" rel="noopener">font-awesome</a> 官方网站。</p>
<h3 id="16-待办事宜-Todo-列表"><a href="#16-待办事宜-Todo-列表" class="headerlink" title="16. 待办事宜 Todo 列表"></a>16. 待办事宜 Todo 列表</h3><p>使用带有 [ ] 或 [x] （未完成或已完成）项的列表语法撰写一个待办事宜列表，并且支持子列表嵌套以及混用Markdown语法，例如：</p>
<pre><code>- [ ] **Cmd Markdown 开发**
    - [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率
    - [ ] 支持以 PDF 格式导出文稿
    - [x] 新增Todo列表功能 [语法参考](https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments)
    - [x] 改进 LaTex 功能
        - [x] 修复 LaTex 公式渲染问题
        - [x] 新增 LaTex 公式编号功能 [语法参考](http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers)
- [ ] **七月旅行准备**
    - [ ] 准备邮轮上需要携带的物品
    - [ ] 浏览日本免税店的物品
    - [x] 购买蓝宝石公主号七月一日的船票</code></pre><p>对应显示如下待办事宜 Todo 列表：</p>
<ul>
<li><input disabled="" type="checkbox"> <strong>Cmd Markdown 开发</strong><ul>
<li><input disabled="" type="checkbox"> 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</li>
<li><input disabled="" type="checkbox"> 支持以 PDF 格式导出文稿</li>
<li><input checked="" disabled="" type="checkbox"> 新增Todo列表功能 <a href="https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments" target="_blank" rel="noopener">语法参考</a></li>
<li><input checked="" disabled="" type="checkbox"> 改进 LaTex 功能<ul>
<li><input checked="" disabled="" type="checkbox"> 修复 LaTex 公式渲染问题</li>
<li><input checked="" disabled="" type="checkbox"> 新增 LaTex 公式编号功能 <a href="http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers" target="_blank" rel="noopener">语法参考</a></li>
</ul>
</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <strong>七月旅行准备</strong><ul>
<li><input disabled="" type="checkbox"> 准备邮轮上需要携带的物品</li>
<li><input disabled="" type="checkbox"> 浏览日本免税店的物品</li>
<li><input checked="" disabled="" type="checkbox"> 购买蓝宝石公主号七月一日的船票</li>
</ul>
</li>
</ul>
<p>[^footnote]: 这是一个 <em>注脚</em> 的 <strong>文本</strong>。</p>
<p>[^footnote2]: 这是另一个 <em>注脚</em> 的 <strong>文本</strong>。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello, World！</title>
    <url>/2020/03/26/Hello-World%EF%BC%81/</url>
    <content><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>为什么建这个站呢？</p>
<a id="more"></a>

<ul>
<li><p>大概是因为每次搜一些乱七八糟的东西都能看到别人写的自己的总结，自己的想法</p>
</li>
<li><p>然后尝试着用了用简书，发现不好用，界面我也不喜欢</p>
</li>
<li><p>之前记笔记用one note，真难用，还不支持MarkDown，太丑了，就算全平台我也不能接受，垃圾玩意儿</p>
</li>
<li><p>寒假看了看<a href="https://wangziyu.monster/" target="_blank" rel="noopener">丸子入的网站</a>，觉得挺好玩，就有点想搞了。但是毕竟我是菜鸡，不像丸子入大神会用Wordpress，我就搞搞Hexo玩一玩就可以了</p>
</li>
<li><p>好吧我编不下去了，其实就是疫情在家，我闷得慌，天天不好好学习，天天打游戏看剧（摩登家庭我都看完四季了），然后想想看，不如直接就写个自己的博客网站，自己玩</p>
</li>
</ul>
<p>​    就像丸子入说的，反正就只有我的狐朋狗友才会来看这么无聊的玩意儿，我就瞎jb写写自己的狗屁想法，大家乐呵一下就好了。但是总归自己管的，比较好玩，也有动力，主题看不惯了我也可以换，就 挺好的 嗯！</p>
<p>​    但是！我还是超级希望能够看到大家的评论，听听看大家的想法，交流一下我感觉还是挺好的！超级期待大家的评论！</p>
<p>​    就这样吧，看我这个懒惰的人什么时候停更【摊手.jpg】</p>
<p>​    要是我停更了还有人想看，欢迎骂我，我一定会回来更新的！【狗头.jpg】</p>
<p><strong>Tips:</strong></p>
<ul>
<li>如果想要头像的话，这里使用的是<a href="http://cn.gravatar.com/" target="_blank" rel="noopener">Gravatar</a>，把头像和邮箱进行绑定就可以了，不然就是默认的monster头像</li>
<li>评论使用的是Valine，不需要输入全部的信息也可以评论，或者你换马甲也是可以的</li>
<li>如果想要收到评论的话，就需要输入邮箱，然后就可以收到别人对你的回复！</li>
<li>要是有什么问题，留言就好了，我看到了会及时回复的（我搞了回复邮件提醒嘿嘿嘿，不过他有可能罢工，总之我会尽快回复的）</li>
</ul>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>瞎想</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 博客搭建历程(上)</title>
    <url>/2020/03/26/Hexo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%8E%86%E7%A8%8B-%E4%B8%8A/</url>
    <content><![CDATA[<p>Hexo的简洁、神秘让我跃跃欲试，在使用过程中遇到了很多问题，整理此文，一是方便其他技术人搭建自己的博客，二是给自己的学习之旅做个总结。本文<strong>未完结</strong>，欢迎<code>star</code>、<code>fork</code>，如果有错误，请不吝指出。<br>我搭建的博客地址：<a href="https://mark12a.github.io" target="_blank" rel="noopener"><strong>mark12a.github.io</strong></a><br>然后鉴于GitHub国内太慢，我又放到了Gitee上面<a href="https://mazerunner.gitee.io" target="_blank" rel="noopener"><strong>mazerunner.gitee.io</strong></a><br>二者都可以访问</p>
<a id="more"></a>

<h2 id="1-Hexo介绍"><a href="#1-Hexo介绍" class="headerlink" title="1 Hexo介绍"></a>1 Hexo介绍</h2><p><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a>是基于<code>NodeJs</code>的静态博客框架，简单、轻量，其生成的静态网页可以托管在<code>Github</code>和<code>Heroku</code>上。</p>
<ul>
<li>超快速度</li>
<li>支持MarkDown</li>
<li>一键部署</li>
<li>丰富的插件</li>
</ul>
<blockquote>
<p>下面以我的博客为例，mark12a.github.io</p>
</blockquote>
<h2 id="2-环境准备"><a href="#2-环境准备" class="headerlink" title="2 环境准备"></a>2 环境准备</h2><h3 id="2-1-安装node-js"><a href="#2-1-安装node-js" class="headerlink" title="2.1 安装node.js"></a>2.1 安装node.js</h3><p>去<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">nodejs官网</a>下载对应系统的安装包，按提示安装。</p>
<p>检验安装成功：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ node -v</span><br></pre></td></tr></table></figure>

<h3 id="2-2-安装hexo"><a href="#2-2-安装hexo" class="headerlink" title="2.2 安装hexo"></a>2.2 安装hexo</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure>

<p>注意：Mac系统，则需要  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo npm install hexo-cli -g</span><br></pre></td></tr></table></figure>

<h3 id="2-3-安装git"><a href="#2-3-安装git" class="headerlink" title="2.3 安装git"></a>2.3 安装git</h3><p>很抱歉，但是我真的不想写了，去找教程吧，耶✌️</p>
<h2 id="3-利用Hexo搭建一个博客"><a href="#3-利用Hexo搭建一个博客" class="headerlink" title="3 利用Hexo搭建一个博客"></a>3 利用Hexo搭建一个博客</h2><h3 id="3-1-创建博客目录mark12a-github-io"><a href="#3-1-创建博客目录mark12a-github-io" class="headerlink" title="3.1 创建博客目录mark12a.github.io"></a>3.1 创建博客目录mark12a.github.io</h3><p>你可以在任意的目录下创建文件夹</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo init mark12a.github.io</span><br><span class="line">$ cd limedroid.github.io</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>

<h3 id="3-2-生成静态页面"><a href="#3-2-生成静态页面" class="headerlink" title="3.2 生成静态页面"></a>3.2 生成静态页面</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br></pre></td></tr></table></figure>

<blockquote>
<p>g 即generate</p>
</blockquote>
<h3 id="3-3-运行"><a href="#3-3-运行" class="headerlink" title="3.3 运行"></a>3.3 运行</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure>

<blockquote>
<p>s 即server</p>
</blockquote>
<p>然后打开浏览器，输入地址 <strong>localhost:4000</strong> 即可看到效果</p>
<h2 id="4-发一篇文章试试"><a href="#4-发一篇文章试试" class="headerlink" title="4 发一篇文章试试"></a>4 发一篇文章试试</h2><h3 id="4-1-命令方式"><a href="#4-1-命令方式" class="headerlink" title="4.1 命令方式"></a>4.1 命令方式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo new test</span><br></pre></td></tr></table></figure>

<p>此时会在<code>source/_posts</code>目录下生成<code>test.md</code>文件，输入些许内容，然后保存.</p>
<p>生成下，看看效果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure>

<p>访问 <strong>localhost:4000</strong> 即可</p>
<h3 id="4-2-直接方式"><a href="#4-2-直接方式" class="headerlink" title="4.2 直接方式"></a>4.2 直接方式</h3><p>在 <strong>source/_posts/</strong>下新建一个<code>.md</code>文件也可</p>
<h2 id="5-配置"><a href="#5-配置" class="headerlink" title="5 配置"></a>5 配置</h2><p>网站的设置大部分都在<strong>_config.yml</strong>文件中，详细配置可以查看<a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="noopener">官方文档</a></p>
<p>下面只列出简单常用配置</p>
<ul>
<li><strong>title</strong> -&gt; 网站标题</li>
<li><strong>subtitle</strong> -&gt; 网站副标题</li>
<li><strong>description</strong> -&gt; 网站描述</li>
<li><strong>author</strong> -&gt; 您的名字</li>
<li><strong>language</strong> -&gt; 网站使用的语言</li>
</ul>
<p>巨坑：<strong>进行配置时，包括但不限于本配置，都需要在冒号:后加一个英文空格</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: Droidlover</span><br></pre></td></tr></table></figure>

<h2 id="6-换一个好看的主题"><a href="#6-换一个好看的主题" class="headerlink" title="6 换一个好看的主题"></a>6 换一个好看的主题</h2><p>Hexo 中有很多主题，可以在<a href="https://hexo.io/themes/" target="_blank" rel="noopener">官网</a>查看。<br>这里一般会用<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">hexo-theme-next</a>，下面列举更换主题的一般套路：</p>
<h3 id="6-1-下载主题资源"><a href="#6-1-下载主题资源" class="headerlink" title="6.1 下载主题资源"></a>6.1 下载主题资源</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;iissnan&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure>

<h3 id="6-2-应用下载的主题"><a href="#6-2-应用下载的主题" class="headerlink" title="6.2 应用下载的主题"></a>6.2 应用下载的主题</h3><p>在网站配置文件<strong>_config.yml</strong>中，配置<strong>theme</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure>

<blockquote>
<p>next是主题名称，具体的可查看主题的文档</p>
</blockquote>
<h3 id="6-3-主题其他配置"><a href="#6-3-主题其他配置" class="headerlink" title="6.3 主题其他配置"></a>6.3 主题其他配置</h3><p>可在<code>/theme/{theme}/_config.yml</code> 主题的配置文件下进行主题的配置。</p>
<p>接下来，可以执行万能的调试命令看看效果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure>

<h2 id="7-部署到Github"><a href="#7-部署到Github" class="headerlink" title="7 部署到Github"></a>7 部署到Github</h2><h3 id="7-1-有个github账号xxx"><a href="#7-1-有个github账号xxx" class="headerlink" title="7.1 有个github账号xxx"></a>7.1 有个github账号xxx</h3><h3 id="7-2-创建一个xxx-github-io的public仓库"><a href="#7-2-创建一个xxx-github-io的public仓库" class="headerlink" title="7.2 创建一个xxx.github.io的public仓库"></a>7.2 创建一个xxx.github.io的public仓库</h3><p>如果您的账户名是mark12a,则需要创建一个mark12a.github.io的public仓库.</p>
<h3 id="7-3-安装-hexo-deployer-git"><a href="#7-3-安装-hexo-deployer-git" class="headerlink" title="7.3 安装 hexo-deployer-git"></a>7.3 安装 <a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="noopener">hexo-deployer-git</a></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<h3 id="7-4-网站配置git"><a href="#7-4-网站配置git" class="headerlink" title="7.4 网站配置git"></a>7.4 网站配置git</h3><p>在网站的<code>_config.yml</code>中配置deploy</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: &lt;repository url&gt;</span><br><span class="line">  branch: [branch]</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>branch</code>为分支，默认为<code>master</code>,可以不配置<br><code>repo</code>为仓库地址，在github上新建仓库后，可复制此地址</p>
</blockquote>
<h3 id="7-5-部署"><a href="#7-5-部署" class="headerlink" title="7.5 部署"></a>7.5 部署</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>

<blockquote>
<p>d 即deploy</p>
</blockquote>
<h2 id="8-同时部署到GitHub和Gitee"><a href="#8-同时部署到GitHub和Gitee" class="headerlink" title="8 同时部署到GitHub和Gitee"></a>8 同时部署到GitHub和Gitee</h2><p>GitHub国内实在是太慢了，因此推荐使用<a href="https://gitee.com/" target="_blank" rel="noopener">Gitee</a>作为替代</p>
<h3 id="8-1-注册Gitee账号"><a href="#8-1-注册Gitee账号" class="headerlink" title="8.1 注册Gitee账号"></a>8.1 注册<a href="https://gitee.com/" target="_blank" rel="noopener">Gitee</a>账号</h3><h3 id="8-2-创建一个仓库，与个人的账户信息同名即可"><a href="#8-2-创建一个仓库，与个人的账户信息同名即可" class="headerlink" title="8.2 创建一个仓库，与个人的账户信息同名即可"></a>8.2 创建一个仓库，与个人的账户信息同名即可</h3><p><strong>注</strong>：其实不相同也可以，但是那样的话就会站点导致多出来仓库的名称，还要改配置文件，总之就是很麻烦，建议直接账户信息同名</p>
<h3 id="8-3-配置仓库"><a href="#8-3-配置仓库" class="headerlink" title="8.3 配置仓库"></a>8.3 配置仓库</h3><ul>
<li>首先进入仓库</li>
<li>点击仓库名下面一排菜单栏当中的<strong>服务</strong>–&gt;<strong>Gitee Pages</strong></li>
<li>然后无需修改，直接点击最下方的<strong>部署</strong>即可</li>
<li>接着会开始部署，等一会之后就会给出你的网站地址</li>
</ul>
<h3 id="8-4-修改配置文件"><a href="#8-4-修改配置文件" class="headerlink" title="8.4 修改配置文件"></a>8.4 修改配置文件</h3><p>如果想要部署到Gitee和 Github，就需要修改<strong>站点配置文件</strong><code>_config.yml</code>的 deploy 配置</p>
<p>原配置：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@gitee.com:用户名/用户名.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p>修改为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo:</span><br><span class="line">    gitee: git@gitee.com:用户名&#x2F;用户名.git</span><br><span class="line">    github: git@github.com:用户名&#x2F;仓库名.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p>完成</p>
<blockquote>
<p><strong>注意：</strong>每次提交给Gitee之后，都需要手动再次部署(如果你用的是和我一样穷的免费版的话)，不然的话效果不会改变的。</p>
</blockquote>
<h2 id="9-贴标签，方便搜索"><a href="#9-贴标签，方便搜索" class="headerlink" title="9 贴标签，方便搜索"></a>9 贴标签，方便搜索</h2><h3 id="9-1-两个确认"><a href="#9-1-两个确认" class="headerlink" title="9.1 两个确认"></a>9.1 两个确认</h3><ul>
<li>确认站点配置文件有 (在根目录下的_config.yml中查找)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tag_dir: tags</span><br></pre></td></tr></table></figure>

<ul>
<li>确认主题配置文件有(在主题目录下的_config.yml中查找</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tags: tags</span><br></pre></td></tr></table></figure>

<h3 id="9-2-新建tags页面"><a href="#9-2-新建tags页面" class="headerlink" title="9.2 新建tags页面"></a>9.2 新建tags页面</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo new page tags</span><br></pre></td></tr></table></figure>

<p>此时会在<code>source/</code>下生成<code>tags/index.md</code>文件</p>
<h3 id="9-3-修改source-tags-index-md"><a href="#9-3-修改source-tags-index-md" class="headerlink" title="9.3 修改source/tags/index.md"></a>9.3 修改source/tags/index.md</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: tags</span><br><span class="line">date: 2020-03-26 16:49:50</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">comments: false</span><br></pre></td></tr></table></figure>

<blockquote>
<p>date 可保持系统生成的时间，</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type: &quot;tags&quot;</span><br><span class="line">comments: false</span><br></pre></td></tr></table></figure>

<p>很重要</p>
<h3 id="9-4-在文章中添加tags"><a href="#9-4-在文章中添加tags" class="headerlink" title="9.4 在文章中添加tags"></a>9.4 在文章中添加tags</h3><p>在文章<code>xx.md</code>中添加：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tags: </span><br><span class="line">	- Tag1</span><br><span class="line">	- Tag2</span><br><span class="line">	- Tag3</span><br></pre></td></tr></table></figure>

<p>多个Tag可按上面的格式添加。</p>
<p>其文件头部类似：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: &lt;TitleName&gt;</span><br><span class="line">date: 2020-03-26 15:48:27</span><br><span class="line">tags: </span><br><span class="line">	- Tag1</span><br><span class="line">	- Tag2</span><br><span class="line">	- Tag3</span><br></pre></td></tr></table></figure>



<h2 id="10-分类，给文章归档"><a href="#10-分类，给文章归档" class="headerlink" title="10 分类，给文章归档"></a>10 分类，给文章归档</h2><h3 id="10-1-两个确认"><a href="#10-1-两个确认" class="headerlink" title="10.1 两个确认"></a>10.1 两个确认</h3><ul>
<li>确认站点配置文件打开了</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">category_dir: categories</span><br></pre></td></tr></table></figure>

<ul>
<li>确认主题配置文件打开了</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">categories: &#x2F;categories</span><br></pre></td></tr></table></figure>

<h3 id="10-2-新建categories文件"><a href="#10-2-新建categories文件" class="headerlink" title="10.2 新建categories文件"></a>10.2 新建categories文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo new page categories</span><br></pre></td></tr></table></figure>

<p>此时会在<code>source</code>目录下生成<code>categories/index.md</code>文件</p>
<h3 id="10-3-修改categories-index-md"><a href="#10-3-修改categories-index-md" class="headerlink" title="10.3 修改categories/index.md"></a>10.3 修改categories/index.md</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: categories</span><br><span class="line">date: 2020-03-26 13:48:30</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">comments: false</span><br></pre></td></tr></table></figure>

<blockquote>
<p>date 可保持系统生成的时间，</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type: &quot;categories&quot;</span><br><span class="line">comments: false</span><br></pre></td></tr></table></figure>

<p>很重要</p>
<h3 id="10-4-在文章中添加categories"><a href="#10-4-在文章中添加categories" class="headerlink" title="10.4 在文章中添加categories"></a>10.4 在文章中添加categories</h3><p>在文章xx.md中添加：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">categories: </span><br><span class="line">	- cate</span><br></pre></td></tr></table></figure>

<p>其文件头部类似：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: TagEditText</span><br><span class="line">date: 2020-01-19 10:44:25</span><br><span class="line">categories: </span><br><span class="line">	- cate</span><br></pre></td></tr></table></figure>

<p>好，至此基本都已经OK了，关于主题的内容，直接查看相关主题的说明文档即可</p>
<p>但是我想了想，光自己写比较无聊，还是希望有人能看到，能够交互起来才比较好，因此还是加入了评论的功能，<strong>欢迎大家来玩！</strong></p>
<p>好，我已经弄好了，但是太累了，不想写了，挖个坑，下次再写！</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>About Me</title>
    <url>/2020/03/26/about/</url>
    <content><![CDATA[<blockquote>
<p>A Student, major in CS, Beijing Jiaotong University, China.</p>
</blockquote>
<p><strong>姓名：</strong>倪炜<br><strong>现居：</strong>Beijing<br><strong>GitHub：</strong> <a href="https://github.com/Mark12a" target="_blank" rel="noopener">Mark12a</a><br><strong>Twitter:</strong> <a href="https://twitter.com/Maze_Runner8976" target="_blank" rel="noopener">Mark Smith</a><br><strong>FaceBook：</strong> <a href="https://www.facebook.com/profile.php?id=100030730761687" target="_blank" rel="noopener">Ni Wei</a><br><strong>QQ：</strong> <a href="http://wpa.qq.com/msgrd?v=3&uin=834381638&site=qq&menu=yes" target="_blank" rel="noopener">834381638</a></p>
<a id="more"></a>



<!-- ![avatar.jpg](https://tva1.sinaimg.cn/large/00831rSTgy1gd7dlkebs3j30zo0u07wh.jpg) -->

<img src= "/img/loading.gif" data-lazy-src="https://tva1.sinaimg.cn/large/00831rSTgy1gd7dlkebs3j30zo0u07wh.jpg" alt="avatar" width="300" style="border-radius:10%"/>

]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/03/26/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>test</title>
    <url>/2020/03/25/test/</url>
    <content><![CDATA[<h3 id="这是一个测试"><a href="#这是一个测试" class="headerlink" title="这是一个测试"></a>这是一个测试</h3>]]></content>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>Ayer中文说明</title>
    <url>/2019/12/03/Ayer%E4%B8%AD%E6%96%87%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><blockquote>
<p><a href="https://github.com/Shen-Yu/hexo-theme-ayer" target="_blank" rel="noopener">Ayer</a> 是一个干净且优雅的Hexo主题，自带响应式，加载速度很快，该有的功能都有，可配置项很多，非常适合作为你的博客主题，主题内还附送了6张精美的高清壁纸。欢迎使用和Star支持，如果你在使用过程中有任何疑问或者建议，欢迎联系我！如果你的博客采用了本主题，欢迎在下面评论区留下地址~</p>
</blockquote>
<p><a href="https://github.com/Shen-Yu/hexo-theme-ayer" target="_blank" rel="noopener">Ayer</a> 在马来语中是“水”的意思，在西班牙语中是“昨天”的意思。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://pic.downk.cc/item/5e739724e83c3a1e3ab53941.jpg" alt="hexo-theme-ayer"></p>
<p><a href="https://github.com/Shen-Yu/hexo-theme-ayer" target="_blank" rel="noopener">GitHub地址</a></p>
<p><a href="https://gitee.com/shen-yu/hexo-theme-ayer" target="_blank" rel="noopener">国内镜像</a></p>
<p><a href="https://shen-yu.gitee.io" target="_blank" rel="noopener">效果预览</a></p>
<p><a href="https://shen-yu.gitee.io/2019/ayer/" target="_blank" rel="noopener">中文说明</a></p>
<a id="more"></a>

<h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><ol>
<li>干净且优雅，文章内容美观易读</li>
<li>首页封面全屏平铺，扁平化设计，简洁又不失高大上</li>
<li>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</li>
<li>首页封面和文案可以任意更换，主题内附送6张精美高清壁纸</li>
<li>时间轴式的归档页</li>
<li>侧边栏可以点击显示或隐藏</li>
<li>支持文章置顶和文章打赏</li>
<li>支持文章字数和阅读时长统计</li>
<li>支持网易云音乐播放</li>
<li>支持 <code>MathJax</code> 数学公式</li>
<li><code>TOC</code> 目录在文章页悬浮，跳转更方便</li>
<li>可设置阅读文章时做密码验证（<a href="https://github.com/MikeCoder/hexo-blog-encrypt/blob/master/ReadMe.zh.md" target="_blank" rel="noopener">hexo-blog-encrypt</a>）</li>
<li><a href="https://valine.js.org/" target="_blank" rel="noopener">Valine</a>和<a href="https://gitalk.github.io/" target="_blank" rel="noopener">Gitalk</a>评论模块（推荐配合<code>leancloud</code>使用 <code>Valine</code>）</li>
<li>集成了不蒜子、百度统计、Google Analytics、CNZZ等统计功能</li>
<li>支持Github Ribbons</li>
</ol>
<p>如果想体验手机端浏览效果，可以扫一下二维码：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://pic.downk.cc/item/5e739676e83c3a1e3ab4b372.jpg" alt="手机端效果"> </p>
<h1 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a>打赏</h1><p>本主题完全开源且免费，目前由我一个人维护，如果你觉得主题不错，你可以选择继续白嫖，也可以选择适当打赏我，不在于金额多少，而是能让我更有动力去维护这个主题。打赏请备注说明，谢谢~</p>
<div style="width:100%;text-align:center;font-weight:bold">
<span style="width:30%;display:inline-block">
微信
<img src= "/img/loading.gif" data-lazy-src="https://pic.downk.cc/item/5e75c6079d7d586a54ce7611.png" alt="wechat" style="width:100%"></span>
<span style="width:30%;;display:inline-block">
支付宝
<img src= "/img/loading.gif" data-lazy-src="https://pic.downk.cc/item/5e75c6079d7d586a54ce7613.jpg" alt="alipay" style="width:100%"></span>
</div>

<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 国内用户如果速度较慢，可以把github地址替换为：https://gitee.com/shen-yu/hexo-theme-ayer.git</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/Shen-Yu/hexo-theme-ayer.git themes/ayer</span><br></pre></td></tr></table></figure>

<h1 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h1><p>将博客根目录下的 <code>_config.yml</code> 里的 <code>theme</code> 值修改成 <code>ayer</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">ayer</span></span><br></pre></td></tr></table></figure>

<h1 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes/ayer</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure>

<h1 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h1><p>以下是ayer主题目录下的 <code>_config.yml</code>文件配置，请先确保你已经读过<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo文档</a>。如果你在配置过程中有问题，请先擅用 <a href="https://cn.bing.com" target="_blank" rel="noopener">搜索引擎</a>。如果你搜不到解决方法，你可以参考：<a href="https://gitee.com/shen-yu/shen-yu/tree/dev/" target="_blank" rel="noopener">我的博客源码</a>，按照我的一模一样配肯定是不会有问题的。如果对部分字体或颜色等有定制需求，请自行在css文件进行修改，主题本身已经很符合审美，自定义配置项也很多，不建议改得花里胡哨，过大的字体和库都会影响博客加载速度。如果还有问题或者建议，那么请在评论区给我留言~</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 侧边栏菜单</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">主页:</span> <span class="string">/</span></span><br><span class="line">  <span class="string">归档:</span> <span class="string">/archives</span></span><br><span class="line">  <span class="string">分类:</span> <span class="string">/categories</span></span><br><span class="line">  <span class="string">标签:</span> <span class="string">/tags</span></span><br><span class="line">  <span class="string">摄影:</span> <span class="string">http://shenyu-vip.lofter.com</span></span><br><span class="line">  <span class="string">旅行:</span> <span class="string">/tags/旅行/</span></span><br><span class="line">  <span class="string">关于我:</span> <span class="string">/2019/about</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 站点次标题和打字动效</span></span><br><span class="line"><span class="comment"># https://github.com/mattboldt/typed.js</span></span><br><span class="line"><span class="attr">subtitle:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>  <span class="comment"># 是否开启动效</span></span><br><span class="line">  <span class="attr">text:</span> <span class="string">面朝大海，春暖花开</span>  <span class="comment"># 显示的文字</span></span><br><span class="line">  <span class="attr">text2:</span> <span class="string">愿你一生努力，一生被爱</span>   <span class="comment"># 滚动播放，如果不需要可以留空</span></span><br><span class="line">  <span class="attr">text3:</span> <span class="string">想要的都拥有，得不到的都释怀</span>  <span class="comment"># 最多支持三段文字</span></span><br><span class="line">  <span class="attr">startDelay:</span> <span class="number">0</span>   <span class="comment"># 延迟时间</span></span><br><span class="line">  <span class="attr">typeSpeed:</span> <span class="number">200</span>  <span class="comment"># 打字速度</span></span><br><span class="line">  <span class="attr">loop:</span> <span class="literal">true</span>  <span class="comment"># 是否循环</span></span><br><span class="line">  <span class="attr">backSpeed:</span> <span class="number">100</span>  <span class="comment"># 回退速度</span></span><br><span class="line">  <span class="attr">showCursor:</span> <span class="literal">true</span>  <span class="comment"># 是否显示光标</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网站图标和侧边栏logo</span></span><br><span class="line"><span class="attr">favicon:</span> <span class="string">/favicon.ico</span></span><br><span class="line"><span class="attr">logo:</span> <span class="string">/images/ayer-side.svg</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 封面配置</span></span><br><span class="line"><span class="comment"># enable-是否启用封面；path-封面背景图；logo-封面logo</span></span><br><span class="line"><span class="attr">cover:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">/images/cover1.jpg</span>  <span class="comment"># /source/images目录下附送多张精美壁纸，可任意更换</span></span><br><span class="line">  <span class="attr">logo:</span> <span class="string">/images/ayer.svg</span>  <span class="comment"># 如果不要直接设置成false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 页面顶部进度条  </span></span><br><span class="line"><span class="attr">progressBar:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网易云音乐插件</span></span><br><span class="line"><span class="attr">music:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 播放器尺寸类型(1：小尺寸、2：大尺寸)</span></span><br><span class="line">  <span class="attr">type:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">id:</span> <span class="number">518895142</span>  <span class="comment"># 网易云分享的音乐ID(更换音乐请更改此配置项)</span></span><br><span class="line">  <span class="attr">autoPlay:</span> <span class="literal">true</span>  <span class="comment"># 是否开启自动播放</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文章配置</span></span><br><span class="line"><span class="comment"># 文章太长，截断按钮文字(在需要截断的行增加此标记：&lt;!--more--&gt;)</span></span><br><span class="line"><span class="attr">excerpt_link:</span> <span class="string">阅读更多...</span></span><br><span class="line"><span class="comment"># 如果你嫌每篇文章手动加more标记比较麻烦，又不想在首页全文显示，可以把excerpt_all设置成true，这样首页只会显示文章归档</span></span><br><span class="line"><span class="attr">excerpt_all:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否开启文章分享按钮</span></span><br><span class="line"><span class="attr">share_enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 国内的社交平台(If you are not in China, maybe you prefer to set:false)</span></span><br><span class="line"><span class="attr">share_china:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 文章分享文字</span></span><br><span class="line"><span class="attr">share_text:</span> <span class="string">分享</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分页文字</span></span><br><span class="line"><span class="attr">nav_text:</span></span><br><span class="line">  <span class="attr">page_prev:</span> <span class="string">上一页</span></span><br><span class="line">  <span class="attr">page_next:</span> <span class="string">下一页</span></span><br><span class="line">  <span class="attr">post_prev:</span> <span class="string">上一篇</span></span><br><span class="line">  <span class="attr">post_next:</span> <span class="string">下一篇</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文章页是否显示目录</span></span><br><span class="line"><span class="attr">toc:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文章中的图片是否支持点击放大</span></span><br><span class="line"><span class="attr">image_viewer:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># https://github.com/willin/hexo-wordcount</span></span><br><span class="line"><span class="comment"># 是否开启字数统计(关闭请设置enable为false)</span></span><br><span class="line"><span class="comment"># 也可以单独在md文件里Front-matter设置`no_word_count: true`属性，来自定义关闭字数统计</span></span><br><span class="line"><span class="attr">word_count:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 只在文章详情显示(不在首页显示)</span></span><br><span class="line">  <span class="attr">only_article_visit:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打赏</span></span><br><span class="line"><span class="comment"># 打赏type设定：0-关闭打赏； 1-文章对应的md文件里有reward:true属性，才有打赏； 2-默认开启所有文章均有打赏，如果有些文章你不需要，请在文章对应的md文件里设置no_reward:true</span></span><br><span class="line"><span class="attr">reward_type:</span> <span class="number">1</span></span><br><span class="line"><span class="comment"># 打赏wording</span></span><br><span class="line"><span class="attr">reward_wording:</span> <span class="string">'请我喝杯咖啡吧~'</span></span><br><span class="line"><span class="comment"># 支付宝二维码图片地址，跟你设置logo的方式一样。比如：/images/alipay.jpg</span></span><br><span class="line"><span class="attr">alipay:</span> <span class="string">/images/alipay.jpg</span></span><br><span class="line"><span class="comment"># 微信二维码图片地址</span></span><br><span class="line"><span class="attr">weixin:</span> <span class="string">/images/wechat.jpg</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 版权声明</span></span><br><span class="line"><span class="comment"># 版权声明type设定：0-关闭版权声明； 1-文章对应的md文件里有copyright: true属性，才有版权声明； 2-所有文章均有版权声明</span></span><br><span class="line"><span class="attr">copyright_type:</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否启用搜索</span></span><br><span class="line"><span class="attr">search:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># RSS订阅(先安装hexo-generator-feed插件，再去博客根目录config进行配置)</span></span><br><span class="line"><span class="attr">rss:</span> <span class="string">/atom.xml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 评论：1、Valine(推荐)；2、Gitalk</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1、Valine[一款快速、简洁且高效的无后端评论系统](https://github.com/xCss/Valine)</span></span><br><span class="line"><span class="comment"># 启用Valine必须先创建leancloud应用， 注册账号后获取 id|key 填入即可</span></span><br><span class="line"><span class="attr">leancloud:</span>  </span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">app_id:</span> <span class="comment">#</span></span><br><span class="line">  <span class="attr">app_key:</span> <span class="comment">#</span></span><br><span class="line"><span class="comment"># Valine配置(如果有些文章你想关闭评论，请在文章对应的md文件里设置no_valine:true)</span></span><br><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 是否启用</span></span><br><span class="line">  <span class="attr">verify:</span> <span class="literal">false</span> <span class="comment"># 是否开启防垃圾评论验证</span></span><br><span class="line">  <span class="attr">notify:</span> <span class="literal">false</span> <span class="comment"># 是否开启邮件提醒(https://valine.js.org/notify.html)</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">mp</span> <span class="comment"># 头像样式(https://valine.js.org/avatar.html)</span></span><br><span class="line">  <span class="attr">placeholder:</span> <span class="string">给我的文章加点评论吧~</span> <span class="comment"># placeholder</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、Gitalk(https://github.com/gitalk/gitalk)</span></span><br><span class="line"><span class="attr">gitalk:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span> <span class="comment"># true</span></span><br><span class="line">  <span class="attr">clientID:</span> <span class="comment"># GitHub Application Client ID</span></span><br><span class="line">  <span class="attr">clientSecret:</span> <span class="comment"># Client Secret</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="comment"># Repository name</span></span><br><span class="line">  <span class="attr">owner:</span> <span class="comment"># GitHub ID</span></span><br><span class="line">  <span class="attr">admin:</span> <span class="comment"># GitHub ID</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># GitHub Ribbons-封面右上角的forkme</span></span><br><span class="line"><span class="attr">github:</span> </span><br><span class="line">  <span class="comment"># (关闭请设置为false)</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">https://github.com/Shen-Yu/hexo-theme-ayer</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># fancybox(仅用于相册展示，若需要可配置albums)</span></span><br><span class="line"><span class="attr">fancybox:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问量统计(不蒜子)</span></span><br><span class="line"><span class="attr">busuanzi:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 友盟cnzz统计(url填js代码src链接)</span></span><br><span class="line"><span class="attr">cnzz:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">url:</span> <span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Google Analytics</span></span><br><span class="line"><span class="attr">google_analytics:</span> <span class="string">''</span></span><br><span class="line"><span class="comment"># 百度统计</span></span><br><span class="line"><span class="attr">baidu_analytics:</span> <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数学公式</span></span><br><span class="line"><span class="attr">mathjax:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网站成立年份(默认为 2019，若填入年份小于当前年份，则显示为 2018-2019 类似的格式)</span></span><br><span class="line"><span class="attr">since:</span> <span class="number">2019</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#是否显示页脚信息(建议保留，有助于本主题的推广)</span></span><br><span class="line"><span class="attr">pageFooter:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#ICP备案信息尾部显示</span></span><br><span class="line"><span class="attr">icp:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">'http://www.beian.miit.gov.cn/'</span> <span class="comment"># 备案链接</span></span><br><span class="line">  <span class="attr">text:</span> <span class="string">'浙ICP备88888888'</span> <span class="comment"># 备案信息</span></span><br></pre></td></tr></table></figure>


<h2 id="插件-必需"><a href="#插件-必需" class="headerlink" title="插件(必需)"></a>插件(必需)</h2><ul>
<li><p><a href="https://github.com/theme-next/hexo-generator-searchdb" target="_blank" rel="noopener">hexo-generator-searchdb</a> 用于搜索</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-generator-searchdb</span> <span class="string">--save</span></span><br></pre></td></tr></table></figure>
<p>然后将以下配置复制到你博客根目录下的 <code>_config.yml</code> 里（注意不是ayer目录下的）:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hexo-generator-searchdb</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="noopener">hexo-generate-feed</a> 用于生成RSS订阅</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-generator-feed</span> <span class="string">--save</span></span><br></pre></td></tr></table></figure>

<p>  然后将以下配置复制到你博客根目录下的 <code>_config.yml</code> 里（注意不是ayer目录下的）:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feed:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">atom</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">atom.xml</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">hub:</span></span><br><span class="line">    <span class="attr">content:</span></span><br><span class="line">    <span class="attr">content_limit:</span> <span class="number">140</span></span><br><span class="line">    <span class="attr">content_limit_delim:</span> <span class="string">' '</span></span><br><span class="line">    <span class="attr">order_by:</span> <span class="string">-date</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="插件-可选"><a href="#插件-可选" class="headerlink" title="插件(可选)"></a>插件(可选)</h2><ul>
<li><p><a href="https://github.com/netcan/hexo-generator-index-pin-top" target="_blank" rel="noopener">hexo-generator-index-pin-top</a> 用于文章置顶</p>
</li>
<li><p><a href="https://github.com/MikeCoder/hexo-blog-encrypt/blob/master/ReadMe.zh.md" target="_blank" rel="noopener">hexo-blog-encrypt</a> 用于文章加密</p>
</li>
<li><p><a href="https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md" target="_blank" rel="noopener">hexo-tag-aplayer</a> 用于播放音乐</p>
</li>
<li><p><a href="https://github.com/MoePlayer/hexo-tag-dplayer" target="_blank" rel="noopener">hexo-tag-dplayer</a> 用于播放视频</p>
</li>
<li><p><a href="https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md" target="_blank" rel="noopener">hexo-helper-live2d</a> 二次元看板娘</p>
</li>
</ul>
<p>更多插件请见 <a href="https://hexo.io/plugins/" target="_blank" rel="noopener">hexo插件市场</a></p>
<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure>
<p>然后将以下复制到/source/categories/index.md文件</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">type: "categories"</span><br><span class="line">layout: "categories"</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure>
<p>配置同分类一样</p>
<h2 id="相册"><a href="#相册" class="headerlink" title="相册"></a>相册</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page photos</span><br></pre></td></tr></table></figure>
<p>然后将以下复制到/source/photos/index.md文件，img_url替换成图片路径，caption替换成图片名称</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Gallery</span><br><span class="line"></span><br><span class="line">albums: [</span><br><span class="line"><span class="code">        ["img_url","img_caption"],</span></span><br><span class="line"><span class="code">        ["img_url","img_caption"]</span></span><br><span class="line"><span class="code">        ]</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h2 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h2><p>用Tocbot解析文章标题并生成目录</p>
<ul>
<li><p>将以下配置复制到你ayer目录下的 <code>_config.yml</code> 里：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Toc</span></span><br><span class="line"> toc: <span class="literal">true</span></span><br></pre></td></tr></table></figure></li>
<li><p>当然你可能并不想所有文章都生成悬浮目录，你可以在文章顶部的配置中加一行来进行关闭：</p>
  <figure class="highlight md"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">toc: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h2 id="一-本地图片引用了却无法显示"><a href="#一-本地图片引用了却无法显示" class="headerlink" title="一.本地图片引用了却无法显示"></a>一.本地图片引用了却无法显示</h2><blockquote>
<p>插入图片的两种方法：1.引用图床，2.引用本地图片。为了防止路径出错，建议使用图床。</p>
</blockquote>
<h3 id="1-图床"><a href="#1-图床" class="headerlink" title="1.图床"></a>1.图床</h3><p>推荐使用：<a href="https://sm.ms/" target="_blank" rel="noopener">SM.MS</a>，<a href="https://www.superbed.cn/" target="_blank" rel="noopener">聚合图床</a></p>
<h3 id="2-本地图片"><a href="#2-本地图片" class="headerlink" title="2.本地图片"></a>2.本地图片</h3><p>建议在hexo创建的博客目录下的source中建立一个images文件夹专门放图片，路径：你的博客目录<code>/source/images</code>，如果还是无法显示，请尝试在文章里用html的img标签来引用本地图片。</p>
<h2 id="二-点击侧边栏页面无法显示"><a href="#二-点击侧边栏页面无法显示" class="headerlink" title="二.点击侧边栏页面无法显示"></a>二.点击侧边栏页面无法显示</h2><p>原因：ayer主题目录下的 <code>config.yml</code> 里menu属性的路径不对，这需要你根据页面路径手动配置。</p>
<p>以我的博客为例：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">主页:</span> <span class="string">/</span></span><br><span class="line">  <span class="string">归档:</span> <span class="string">/archives</span></span><br><span class="line">  <span class="string">分类:</span> <span class="string">/categories</span></span><br><span class="line">  <span class="string">标签:</span> <span class="string">/tags</span></span><br><span class="line">  <span class="string">旅行:</span> <span class="string">/tags/旅行/</span></span><br><span class="line">  <span class="string">摄影:</span> <span class="string">http://shenyu-vip.lofter.com</span></span><br><span class="line">  <span class="string">关于我:</span> <span class="string">/2019/about</span></span><br></pre></td></tr></table></figure>

<p>上面的<code>归档/archives</code>是固定的，你不需要修改，<code>标签</code>和<code>分类</code>都需要手动创建目录，<code>旅行</code>实际上就是一个标签页，当你在文章头部设置tags属性后就会自动生成，<code>摄影</code>是一个站外的绝对路径，<code>关于我</code>实际上就是一个正常的文章页。好了，现在一个侧边栏导航就已经配置好了。</p>
<h2 id="三-为什么修改了配置却没有效果"><a href="#三-为什么修改了配置却没有效果" class="headerlink" title="三.为什么修改了配置却没有效果"></a>三.为什么修改了配置却没有效果</h2><p>建议每次生成站点或部署之前都用 <code>hexo clean</code> 命令清理一下缓存，另外你可能还需要刷新一下。</p>
<h2 id="四-怎么修改大标题和站点信息"><a href="#四-怎么修改大标题和站点信息" class="headerlink" title="四.怎么修改大标题和站点信息"></a>四.怎么修改大标题和站点信息</h2><p>站点配置文件<code>_config.yml</code>是hexo站点根目录下的主配置文件(还不知道是哪里的，自己google)，注意：别和<code>ayer</code>主题目录下的<code>_config.yml</code>搞混了。</p>
<p>修改网站各种资料，例如标题、副标题和邮箱等个人资料，请修改站点根目录下的<code>_config.yml</code></p>
<p>以我的博客为例：<br><img src= "/img/loading.gif" data-lazy-src="https://pic.downk.cc/item/5e75c69c9d7d586a54cf119d.jpg" alt=""></p>
<h2 id="五-怎么添加百度或谷歌统计"><a href="#五-怎么添加百度或谷歌统计" class="headerlink" title="五.怎么添加百度或谷歌统计"></a>五.怎么添加百度或谷歌统计</h2><h3 id="百度统计"><a href="#百度统计" class="headerlink" title="百度统计"></a>百度统计</h3><p>在ayer的config配置里的<code>baidu_analytics</code>填上百度统计代码中的hm.js问好后面那一串东西</p>
<h3 id="谷歌统计"><a href="#谷歌统计" class="headerlink" title="谷歌统计"></a>谷歌统计</h3><p>在ayer的config配置里的<code>google_analytics</code>填上谷歌统计代码的跟踪ID，即UA值(包含UA)</p>
<h2 id="六-怎么查看文章的访问量"><a href="#六-怎么查看文章的访问量" class="headerlink" title="六.怎么查看文章的访问量"></a>六.怎么查看文章的访问量</h2><p>在ayer的config配置里有<code>busuanzi</code>选项，默认设置为<code>enable:true</code>，就开启了站点访问量的统计，站点尾部左下角的<code>PV</code>代表了当前页的访问次数，<code>UV</code>代表了当前站点的访问人数。注意：不蒜子统计是根据当前域名来统计的，你在本地启动的时候由于是localhost，所以数字会很大，部署到线上之后就会根据域名重新统计。</p>
<h2 id="七-网易云音乐无法播放"><a href="#七-网易云音乐无法播放" class="headerlink" title="七.网易云音乐无法播放"></a>七.网易云音乐无法播放</h2><p>这是由于网易云音乐对部分歌曲做了版权限制，你可以多换几首试试，配置文件里的默认歌曲 <code>潮鳴り</code> 是可以播放的。如果你动手能力强，也可以试试音乐播放插件 <a href="https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md" target="_blank" rel="noopener">hexo-tag-aplayer</a>，配合<code>MetingJS</code>可以支持对于 QQ音乐、网易云、虾米、酷狗、百度等平台的音乐播放。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>电影|V字仇杀队</title>
    <url>/2019/07/14/%E7%94%B5%E5%BD%B1%20V%E5%AD%97%E4%BB%87%E6%9D%80%E9%98%9F/</url>
    <content><![CDATA[<p>​    鉴于考完期末之后有天晚上着实不想看书，于是打开电脑，数了一下想看的电影，瞥见了V字仇杀队，好，那就你了</p>
<p>​    本来就已经通过各种途径对这部电影有所耳闻，那个面具的照片更是全网到处可见，本以为这是一部相当平常的带有一点恐怖元素的电影，但是待我看完，发现事情没有那么简单，我有点被震撼到了</p>
<a id="more"></a>

<p>​    那就先简单介绍一下剧情：</p>
<blockquote>
<p>​    电影背景设定在2020年，此时的英国由一个受法西斯政党“北方之火”控制的极权政府统治，成为了一个法西斯极权主义的国家，首脑为独裁者苏特勒。</p>
<p>​    而女主Evey在一次事件中，不幸被政府的爪牙盯上，在生死关头，被一名戴盖伊·福克斯模样面具的怪人拯救，在分离的时候，这位男子在墙上的写有“<strong>STRENGTH THROUGH UNITY，UNITY THROUGH FAITH</strong>”（力量来自团结，团结来自信仰）的海报上用刀刻下一个“V”字，并告诉Evey，这个奇怪的男人叫“V”。</p>
<p>​    随后，V潜入英国电视网（BTN），透过当局的宣传机器澄清了真相。同时，V呼吁全英国的民众在一年后的11月5日站出来，与他一起在英国国会大厦前示威以反抗独裁统治，并暗示他将在那一天摧毁国会大厦。</p>
<p>​    在BTN的职员艾薇帮助下，V从电视台逃脱。V带着艾薇来到了被他称为“影子画廊”（Shadow Gallery）的家，告诉艾薇，出于她的安全考虑她必须藏在这里。然而，当艾薇得知V已杀死了政府的代言人刘易斯·普罗瑟罗（Lewis Prothero），并试图暗杀其他政府高官时，感到惊骇的她决定离开V。</p>
<p>​    在这个事件不久之后，Evey因为自己内心的动摇，加之朋友被政府爪牙杀害，最终被抓进了集中营，被剃光了头发，被百般凌辱，在即将被枪毙的时候，V将Evey救出。而这一切都是V为了训练Evey而采取的行动。随后自己把即将实施的计划告诉了Evey。而这个计划就是模仿盖伊·福克斯当年的“<strong>火药阴谋</strong>”。</p>
<p>​     最后，V顺利的把自己的计划实施了，在炸毁了伦敦两处标志性建筑后，控制了广播电视台，在市民面前把他们被政府禁锢的思想进行一定的释放。市民在11月5日那天起义，与V和Evey一起将国会大厦炸毁。</p>
</blockquote>
<p>​    </p>
<p>​    这部电影展现了导演极多的思考，从政治制度到人性，从新闻到生活</p>
<p><strong>关于政治</strong>，“北方之火”在上台之初的选举当中，并没有占据压倒性的优势。为赢得最终的选举，苏特勒不惜制造大规模的中毒案件，造成了极大的社会恐慌，而正是因为这种恐慌，导致提出的极权方案得以实施，使得“北方之火”稳稳的站到了政治舞台中央，主导整个国家的政治。苏特勒许诺将带来秩序和和平，作为交换，民众需要牺牲言语并保持沉默和服从。</p>
<p><img src= "/img/loading.gif" data-lazy-src="http://ww1.sinaimg.cn/large/006tNc79ly1g4o4hn7ikwj30sg0g0q44.jpg" alt="“苏特勒”的图片搜索结果"></p>
<p>​    在《1984》中亦是如此，“战争即和平”，将战争常态化，并伪造生活物资短缺，时不时还拉响防空警报，并设立秘密警察机构，以清除“对国家危害的人”为借口，清扫所有不同政见的民众，以此激发民众心中的恐惧，来达到自身长久而稳定的统治。</p>
<p>​    这与我们所熟知的世界何其相似，我们会发现无数政府，为了化解国内的政治矛盾，掩盖自身的政策问题，于是树立起一个国家公敌，利用民众对于混乱和敌人的恐惧，迫使民众接受自己提出的议案和政策。日本，就是一个典型，通过对于东亚中国和朝鲜危机的渲染，试图通过这样方式，达到自身修宪的政治目标。</p>
<p><strong>关于新闻</strong>，我曾听过这样一句话，“新闻只是让你看到了有些人让你想看到的世界”，无数的新闻媒体标榜着自己的客观与真实，但是都在为背后的金主写着利益相关的文字。<img src= "/img/loading.gif" data-lazy-src="http://ww3.sinaimg.cn/large/006tNc79ly1g4o4876i47j30rs0bp3zq.jpg" alt="537408-352dcec2b007b540"></p>
<p>​    影片中的BTN是官方的国营电视台，作为政府的发言人，不断报道着虚假新闻，宣传政府的正面形象，甚至将之前在政府担任高级官员调来进行事件评论，讽刺那些反对政府的行为和人民。但是自从V炸毁老贝利街，却被宣传成定向爆破，我们看见民众开始在电视机面前摇头；在后续V制造的一系列事件当中亦是如此，政府越是拼命掩盖，民众越是一眼识破，从此政府的公信力就开始一点一点丧失，最后已经无人相信电视台所播放的内容。而当公信力消失的时刻，离政府的垮台，也就不远了。<img src= "/img/loading.gif" data-lazy-src="http://ww1.sinaimg.cn/large/006tNc79ly1g4o48seqlwj30rs0dlgm9.jpg" alt="537408-b5c29657f43a5cdb"></p>
<p>​    只是，如果出现《1984》当中的极端情况，一切发行的信息都可以被控制，一切纸上的历史都可以被改写，一切反对的人都可以被消灭，所有反对的思想都可以被双重思想忽略和无视，我们又该如何呢？</p>
<p>​    <strong>关于自由</strong>，“自由，自由，多少罪恶假汝之名以行”。在刚开始的电视演讲当中，V将自己包装成正义与自由的象征，但是最终我们发现，这不过是在利用民众的反对心理，达到自身复仇的目的。当Evey发现这一切并向V提出质疑的时候，V最终回应“你不知道他们对我做的事情有多可怕”。或许是被Evey点醒，才会在最后将一列火车炸药的控制权交给了Evey，因为他与这个本应消失的政党和政权，都属于过去那个可怕的时代，新的时代，应当由新的人开启.</p>
<p>​    而反复提到的11月5日这个纪念日，盖伊·福克斯被烧死的日子，这在V的口中是自由与正义的纪念。然而，当年福克斯想要炸掉英国国会大厦，不过只是极端的宗教思想影响所致，并非自由与正义。</p>
<p>​    这与《1984》当中的“谁掌控了现在，谁就掌控了历史”，如出一辙，只不过这是一次个人的解读而已</p>
<p>​    <strong>关于思想</strong>，这部影片几乎处处都在强调这一点，在电影的开头</p>
<blockquote>
<p>“ 我们被教导要记住思想，而不是人，因为人可能失败，他可能会被捕，他会被杀死，被遗忘，但400年后，思想仍可改变世界。我亲眼目睹了思想的力量，我见过人们以它为名杀戮，或是为了维护它献出生命，但你不能亲吻思想，也不能触摸它或抱着它，思想不会流血，不会感到痛苦，它们没有爱。”</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="http://ww3.sinaimg.cn/large/006tNc79ly1g4o49kxc9jj30rs0fn0tl.jpg" alt="2704173-e6b9cb8593d4457a">    甚至在这个极权政府看来也是如此，口号<strong>“力量来自团结，团结来自信仰”</strong>，正是最好的体现。</p>
<p>​    在最后面对秘密警察头子Creedy的时候，由于V自身的细胞变异，导致他的身体远远强于常人，因而即便身中数颗子弹，他也没有死去，在一场优雅的屠杀之后，只剩下了Creedy一人，Creedy打光了手中所有的子弹，惊恐的叫到“你怎么还没死？”</p>
<p>​    V答道：“这张面具之下不止是肉体，这张面具之下是一种思想，克里蒂先生，而思想是不怕子弹的。”<img src= "/img/loading.gif" data-lazy-src="http://ww3.sinaimg.cn/large/006tNc79ly1g4o4a0uff1j30g40923yk.jpg" alt="5000449-f2c910b6b607d9b2"></p>
<p><img src= "/img/loading.gif" data-lazy-src="http://ww4.sinaimg.cn/large/006tNc79ly1g4o49b4ymbj30rs0fnt92.jpg" alt="2704173-98614ad760eceee2"></p>
<p>​    当思想的种子在亿万人心中埋下，那它注定有一天将会生根发芽，并且使得肉身成为思想的附庸，一切行为将按照思想的意志来进行</p>
<p>​    最后，<strong>关于人性</strong>，这是一个很宏大而深刻的话题，我谨慎的谈一谈这部电影中我的看法和理解</p>
<p>​    恐惧，这是一个无法绕开的话题，女主角Evey，从小跟着具有反政府思想的父母，看到了太多的争斗和冲突。她的父母是勇敢的，一个被杀害，一个被抓走。于是Evey明白了，在这个时代，做个“与众不同的人”会遭受什么样的后果，所以她后来也学着和大部分人一样，学着沉默和服从。她不再关心任何大众的，她只想安分守己的过自己的生活。</p>
<p>   V众多反政府的行为深深震撼了Evey，尽管她知道这个世界的所有问题，也想像V一样，勇敢的站出来去改变世界。但她看到了所有反对者的后果，她在恐惧着最人类心中最原始的东西——死亡。</p>
<p>   Evey本能地开始逃避，在一次复仇计划中，她假装帮助V，并顺利逃走，离开了V。而没过多久，她又被一个黑面人抓进牢房中，在这个牢房，Evey就像当初的V一样，开始遭受各种拷问和虐待。</p>
<p>​    这期间，几乎面临崩溃的Evey，无意中发现了一张塞在角落的纸条。纸条似乎是隔壁牢房的人所写，她的名字叫瓦莱里，曾经是一名演员，因为同性恋，不被理解，被父母赶出家门，而她和她的女朋友，双双被警察抓走。在临死之际，她将遗书写在了偷偷藏起来的厕所纸上。</p>
<p>   而正是这份遗书，给了Evey真正的力量，坚定着自己的信仰和内心。一个素未谋面的人，却给了Evey这一生从未有过的勇气和爱。那份遗书，不仅仅是一个故事和几句鼓励，它帮助Evey找到了真实的自己。</p>
<p>​    我们通过面对恐惧，而看到恐惧的真相。然后了解到再深的恐惧，也不过如此，唯一让人恐惧的，只有恐惧本身。我们无法战胜恐惧，只能通过爱去包容，去照亮。真正的爱可以包容一切，因为万事万物的源头都始于此。</p>
<p>​    于是，Evey不再恐惧，坚定着自己内心的想法，绝不透露V的消息，她真正自由了</p>
<p>​    最后在雨中的片段，不由得让我想起了《肖申克的救赎》，都是大雨中张开双臂，拥抱着自由和蜕变的自己。<img src= "/img/loading.gif" data-lazy-src="http://ww2.sinaimg.cn/large/006tNc79ly1g4o4av93wej30rs0bkaal.jpg" alt="8808323-574e8058e30664e4"></p>
<p>​    有的时候其实在想，面对苦难和恐惧，这是该一件令人庆幸的事情，通过它们，我们才能发现那个真实的自己，并一步一步坚定地走向他</p>
<p>​    而对Evey的爱，也改变了V，V开始从复仇之中得到解脱，他已经拥有了更加珍贵的东西，于是他祥和的躺在列车的玫瑰花从中，走向自己的宿命。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://tva1.sinaimg.cn/large/00831rSTly1gd7pc8s2j8j31020f0jso.jpg" alt=""></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://tva1.sinaimg.cn/large/00831rSTly1gd7pd29y6uj30x00i6ac0.jpg" alt=""></p>
<p>​    </p>
<p>​    在影片开头，V救下Evey之后的自我介绍极其精彩，再配上雨果·维极有磁性的腔调，这段话一直在我脑中浮现</p>
<p>​    鉴于我认为英文会更加原汁原味，那就展现英文并附中文在后</p>
<p>​    This   <strong>visage</strong>,   no   mere   <strong>veneer</strong>  of   <strong>vanity</strong>,   is  it  <strong>vestige</strong>  of   the   <strong>vox</strong>  populi,   now   <strong>vacant</strong>,   <strong>vanished</strong>,   as   the   once   <strong>vital</strong>  <strong>voice</strong>  of   the   <strong>verisimilitude</strong>  now   <strong>venerates</strong>  what   they   once   <strong>vilified</strong>. However,   this   <strong>valorous   visitation</strong>  of   a   by-gone   <strong>vexation</strong>,   stands   <strong>vivified</strong>,   and   has   <strong>vowed</strong>  to   <strong>vanquish</strong>  these   <strong>venal</strong>  and   <strong>virulent</strong>  <strong>vermin   vvn-guarding   vice</strong>  and   <strong>vouchsafing</strong>  the   <strong>violently   vicious</strong>  and   <strong>voracious   violation</strong>  of   <strong>volition</strong>.  The   only     <strong>verdict</strong>  is   <strong>vengeance</strong>;   a   <strong>vendetta</strong>,   held   as   a   <strong>votive</strong>,   not   in   <strong>vain</strong>,   for   the   <strong>value</strong>  and     <strong>veracity</strong>  of   such   shall   one   day   <strong>vindicate</strong>  the   <strong>vigilant</strong>  and   the   <strong>virtuous. Verily</strong>,   this   <strong>vichyssoise</strong>  of   <strong>verbiage   veers</strong>  most   <strong>verbose   vis-à-vis</strong>  an   introduction,   and   so   it   is   my   <strong>very</strong>  good   honor   to   meet   you   and   you   may   call   me   <strong>V</strong>. </p>
<blockquote>
<p>这个面罩，不只是虚华的外表，它代表着幸存的人民呼声。虽然现已空洞、没落，如同那些曾经客观的评论家们现在却屈服于那些他们曾厌恶的东西一样。但是，面对过往伤痛的强烈刺激，它焕发了生机，并决心铲除那些引来腐败堕落的邪恶毒虫。遏制他们狂暴的，恶毒的，以及贪婪的对人性的破坏。对他们唯一的裁决就是复仇。正义和惊醒的信念不是无用的。它们的价值终将与真理的价值一同显现。当然，我这段莫名其妙的杂碎汤带来的是  最冗长的自我介绍。所以现在长话短说：能遇见您是我天大的荣幸，您可以叫我“V”。</p>
</blockquote>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>瞎想</tag>
        <tag>随笔</tag>
        <tag>电影</tag>
      </tags>
  </entry>
  <entry>
    <title>关于生活,关于过去</title>
    <url>/2019/06/23/%E5%85%B3%E4%BA%8E%E7%94%9F%E6%B4%BB%EF%BC%8C%E5%85%B3%E4%BA%8E%E8%BF%87%E5%8E%BB/</url>
    <content><![CDATA[<p>​    考试周的日子总是很煎熬，既不敢充分的去做自己想做的事情，还得坐在自习室一遍一遍看着枯燥的内容，时不时还得担心一下绩点和排名</p>
<p>​    大概正因为日子是枯燥的，才让我去怀念过去。昨晚终于忍不住把自己从小到大发的说说都看了一遍，真的充分感受到了自己小时候是多么中二</p>
<p>​    要不是翻开这些篇章，我大概不会记得，原来我有阵子那么喜欢发句号，一连串的那种，回什么都是一串句号；原来曾经我还有句口头禅叫”什么鬼”，万事万物皆可”什么鬼”；还曾经疯狂转发金山词霸的每日一句，恍惚记起好像是为了掩盖些什么东西；小学的我原来还会疯狂转发别人的说说从不写原创…诸如此类乱七八糟的事情</p>
<a id="more"></a>

<p>​    突然就很庆幸我从来没有删去过这些东西，不论愚蠢还是荒唐，看着这一条一条的内容，就仿佛在看着自己一点一点的长大，这种感觉总是让人很奇妙。看着自己从小学的中二和幼稚，再到初中的假装文艺，高中那种孤独的气息，最终变成了一个只分享自己快乐的人，过往的事情犹如电影一样在眼前匆匆浮现，又飞快的流逝，恍惚间，已经十年了</p>
<p>​    十年里，小学时代打打闹闹的同学现在也不太联系，见面也感觉颇为尴尬，偶尔聊起便发现早已没了共同的语言，即便那是小时候最好的朋友。但是看着某条说说下大家彼此吵架斗嘴，曾经还是有人叫我二蛋和蛋蛋，还会是感觉很温暖，那种穿越时间的温暖，会让你忍不住扬起嘴角的笑容；初中的同学除了玩的很好的，其他早已不见，就像初中那个到处都是棱角还假装忧郁的我，也早已不见；当然托这个互联网时代的福，高中的同学，我们还彼此联系和熟悉。</p>
<p>​    有些人仅仅只会活在你的记忆里，不论现状如何，那个鲜活而让你怀念的人只会在过去时光里熠熠生辉。翻到自己曾经的说说，说最害怕的词是物是人非，突然觉得，那又如何呢？那个你所喜欢和怀念的人，终究还在你的脑中，够啦。</p>
<p>​    时间不会改变我们，最终改变我们的，还是我们自己。</p>
<p>​    看到大概五年前的自己说，我们终究还是孤独的，不论多少人多少事，都只是我们生命之中的过客，最终我们还是要独自去面对生命的悲凉</p>
<p>​    翻着的时候，发现这些老古董，在发表几年之后，还有人愿意来看一眼，大抵只有真正想了解你的人，才会穿越时光，来看看这么久之前的你</p>
<p>​    发现我的日志最近访问的都已经是2014年了，我想，这个时代，等待回应的那种期待感是一种异常奢侈的东西，这种期待感，我已经很久没有感受到了，那就默默发表这个想法，期待着某天还会有人看到，要是某天有人看到了，一定记得告诉我。</p>
<p>​                                                                                                                        —————2019.6.23</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>瞎想</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>贵妇失宠</title>
    <url>/2019/04/20/%E8%B4%B5%E5%A6%87%E5%A4%B1%E5%AE%A0/</url>
    <content><![CDATA[<p>​    茨威格的短篇小说总有一种特殊的魔力，尤其是涉及到人物的心理的时候，那种细致的刻画简直让你觉得书中那个人的心被一点一点剥开展示在你面前；当他讲述日常生活的时候，总是能找到这看似平静大海下的波澜涌动，令人感慨万分。</p>
<a id="more"></a>

<p>​    最近有看到他一篇小说，很有感触，小说名为——<a href="https://www.douban.com/group/topic/49672102/" target="_blank" rel="noopener">《贵妇失宠》</a></p>
<blockquote>
<p>故事的主人公德.普里夫人在她的情人波旁公爵被剥夺执掌国政权柄之后，也收到了国王给她的离开宫廷的命令，她以法国上流社会的心机认为这是短暂的离开，甚至是带着她特有的骄傲从巴黎去到古尔贝宾。在到达古尔贝宾的第一天，她很快从被驱逐的心境中恢复过来，忘情地欣赏乡间的一切，与女工们和小伙子们坦诚相见，感到幸福和充溢。但是对于已经习惯了巴黎繁华喧嚣的德.普里夫人来说，乡间的无聊和安静已没有了吸引力，再加_上她迫切希望从她的旧情人阿兰古尔亲王那里听到她胜利的消息，因此她感到百无聊赖。这个在巴黎备受奉承的贵妇怎能忍受夜晚的孤独和寂寞，她认识了当地神父的侄子，并轻松地勾引了这个年轻人，使他成为自己的情人。就在德.普里夫人急切盼望胜利消息的时候，她开始认识到这个年轻人让她厌烦，并且他现在得到的一切是建立在自己的不幸上的。在一次二人的争执中，德·普里夫人“被她最后的玩具砸的稀烂”。就在此时，她收到了来自巴黎的消息，她还要在古尔贝宾待上两年，这对她来说，无疑是宣判了死刑，“没有幸福，没有财富，没有权力，没有青春，没有爱情，她无法呼吸”。于是她决定自我了断，并且要制造- -种神秘的，诡异的氛围。她邀请巴黎和各省的名流来她的住所娱乐狂欢，并预言十月七日她将死去，计划很顺利，一切照她所预想的进行，她在十月七日喝下了来自中国的毒药，结束了自己的一生，她希望用自己的死使国王，巴黎名流圈泛起哪怕一层涟漪，用死来让他们铭记还有德·普里夫人这样一个女人，但不幸的是，她死的消息在意大利魔术师令人惊讶的绝技中被众人抛之脑后。</p>
</blockquote>
<p>​    值得注意的是最后茨威格对于普里夫人的描写，极为传神，惊为神笔：</p>
<p>​    “她一动不动地躺在地上，活像一只被人驱赶而死的野兽。<strong>‘夜色已渐渐涌入房内，可她没有感到，因为夜晚悄悄来临，它不像正午，放肆地透过窗户往里瞧。它像昏黑的涓涓细流从四壁涌出，把天花板举向虚无之中，把所有的东西都不声不响地冲到它那悄无声息的洪流之中。等她抬眼张望，黑暗已围在她的四周，一片沉寂。只有在什么地方有只小钟滴滴答答作响，无休无止。窗帘叠在一起，是那样阴暗黝黑，仿佛有个可怕的精灵躲在后面，房门不知怎地消失在墙上，整个房间团团封闭在黑暗之中，犹如一口钉死了的棺材。任何地方都找不到进口和出口，到处都没有界线，可又到处都已封死，一切似乎都向人逼了过来，空气的压力越来越大，结果只能喘气，不能呼吸。’</strong></p>
<hr>
<p>​    整篇小说的中心在我看来只有一个——欺骗，普里夫人始终都沉浸在自己的世界之中，总是以为自己掌控着一切。故事的开头，普里夫人本已冥冥之中知晓自己的命运，但仍然装作自己依旧掌控着一切，面对信使波澜不惊，关上门后几乎气疯；面对政敌，依然装作平静；甚至在离开巴黎之时还装作毫不在乎，以为整个巴黎将会为她的离开而震惊。（戏真多）</p>
<p>​    这样的情况下，在回到庄园之后，为了满足自己原有的那种被仰视和奉承的感觉，开始玩弄一位乡村年轻人的感情，看到年轻人为这份感情抓狂的表现符合自己的预期，她的心中似乎就有了一种快感，似乎自己依旧掌控一切。而当最后她被忘却已成定局，普里夫人为了让自己不被忘记，策划了一场闹剧，利用在摄政时期榨取来的千百万金钱，大把大把的恣意挥霍，不断举办着奢靡的盛会，引起周围人的注意，企图使自己再次成为中心。无所伯爵贵族来到她的府邸之时，她就又开始觉得自己自己依然还有着曾经的影响力，还能够影响到巴黎的一举一动，从未意识到所有人的前来不过只是为了宴会，而非她自己。</p>
<p>​    <strong>“她又有了一个目的，她不愿在这里悄然死去，活像一只野兽，待在一个角落气绝身亡。她要死的富有英雄气概，具有传奇色彩，犹如古代的那些女王。她的一生曾经灿烂辉煌；所以她的辞世也应该如此。应该再一次激起成千上万浑浑噩噩的人的赞叹。在巴黎不得有任何人预感到，她在这里痛苦万状地沉沦，为孤独和失宠所刺死，为未能实现的权利欲所焚毁。她要用一出死亡的喜剧来欺骗众人。”</strong></p>
<p>​    甚至在预计死亡的最后，依然欺骗了最后一个人，也就是之前被玩弄的年轻人。同时她做好了一切死亡的准备，把自己盛装打扮。之后，她想象着当她离开人世以后，使者快步如飞，国王大吃一惊，整个法兰西惊愕不已…一想到她在死之前还能再欺骗他们，她就觉得死很轻松。她还要带着微笑死去，喝下毒药之后，她等待着死神来临，微笑着，微笑着，微笑着…让别人感慨于她的淡定和体面</p>
<p>​    但是死神终究不容欺骗，当人们找到德·普里夫人时，她的脸扭成一幅狰狞的怪相。而且，可笑的是，这场表面看来欢快无比的壮丽戏剧，对她辞世之日的神秘预告也是徒劳。关于她自杀的消息传到巴黎时，正好大家正好在看意大利魔法师的表演。她曾预想的轰动整个法兰西的结局，现实中只不过是大家稍稍有些激动、惊讶，而几分钟之后又被遗忘。在法兰西，她竭尽全力表演的一台令人难忘的戏终归不过白费力气。</p>
<p>​    听起来好笑的故事，描述的东西其实也真真切切的发生在我们的身上，至少曾经发生在我的身上。我们往往总是以为自己是个挺重要的人物，不停的装点着自己，作着各种各样的花样死，以为自己是个人物，然而如果我们抬头望向天空，就会发现自己的渺小，在这宇宙和时间的长河之中，我们如同一粒尘埃，最终啥也不是，甚至最后我们的存在也会被时间抹的干干净净，不留痕迹。</p>
<p>​    所以啊，其实重要的事情还是真实的面对自己，了解自己，知道想要什么，不想要什么，足矣。又想起前阵子看的《欢乐颂》，就像樊胜美一样，装出来的东西，迟早有一天会被戳破，到最后啥也不是。</p>
<blockquote>
<p>她那时候还太年轻，不知道所有<em>命运</em>馈赠的礼物，早已在暗中标好了价格。</p>
</blockquote>
<p>​    就像作者在小说最后说道，<strong>“因为世界史容不得擅自闯入的来客，它亲自遴选自己的主人公，把那些不召自来的人们无情的斥退。谁若从滚滚向前的命运之车上掉下来，谁就再也赶不上它。”</strong></p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>瞎想</tag>
        <tag>随笔</tag>
        <tag>阅读</tag>
      </tags>
  </entry>
  <entry>
    <title>今日谷雨</title>
    <url>/2019/04/20/%E4%BB%8A%E6%97%A5%E8%B0%B7%E9%9B%A8/</url>
    <content><![CDATA[<p>​    又是一年谷雨，恰逢北京今天下了小雨，使人分外想念南方的那座小城。</p>
<a id="more"></a>

<p>​    去明湖吃饭的路上，倏忽间发现，3月还光秃秃的梧桐，树叶早已遮天蔽日。想起白居易的那句</p>
<p><strong>“园杏红等拆，庭拦紫芽出。不觉春已深，今朝二月一”</strong> 莫名其妙的，就已近初夏，发现离家已经八周了。</p>
<p>​    北京是个很神奇的城市，干燥的时候让人喘不过气来，但是却又会时不时会出现今天这种杏花雨，令人恍惚间又回到了南方。想起在家的时候，每次下小雨，总会喜欢找一条被雨水完全浸湿的柏油路，闭上眼睛，细细感受着雨水一点一点打到脸上的感觉，很微妙。当各种各样车子驶过的时候，因为下雨的原因，声音总感觉比平时小了一大截，春天的静谧即刻展现。今天走在路上，虽然没有密密如针的雨，但是空气中的湿润和微微的凉意，还是让人恍惚间以为身处南方某处。</p>
<p>​    在九教上自习的时候，望向窗外，脑海中突然就出现了高一在柏楼那间一楼的教室。每次春天下雨的时候，由于北边的小树林，还有南边的灌木丛（姑且这么叫着），如果不开灯，教室里就是漆黑一片，而且极为潮湿，每次下课我都会忍不住跑到楼外，避免那种压抑的感觉。但我居然开始怀念春天时候那间潮湿而又压抑无比的教室了。</p>
<p>​    又想起寒假回去的时候的某个下雨的晚上，坐在江水边，淋着雨，静静听江水呼吸，那种久违的感觉令人无比欢畅，深刻感觉到自己骨子里确确实实的是个南方人。此时已经沈春，想必水位也已经涨上来了。</p>
<p>​    还有上学的时候，每次下雨走高崎的那个大坡，天上就布满了雨伞，走都走不动，就已经令人烦躁，偏偏还有一些骑着车的家长横冲直撞，疯狂的按喇叭，我只想赶紧锤死他。没到这个时候我都会收起伞，直接在别人的伞下穿梭，飞一般的逃离这条路，任凭雨水划到我的脖子里。想必今天那条路上上学的场景，应该也不会变吧。</p>
<p>​    今日谷雨，宜 思乡</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>瞎想</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>LeedCode刷题-1</title>
    <url>/2019/03/03/LeetCode%20%E5%88%B7%E9%A2%98-1/</url>
    <content><![CDATA[<h4 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1. 两数之和"></a>1. 两数之和</h4><blockquote>
<p>给定一个整数数组 <code>nums</code> 和一个目标值 <code>target</code>，请你在该数组中找出和为目标值的那 <strong>两个</strong> 整数，并返回他们的数组下标。</p>
<p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p>
<p><strong>示例:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;给定 nums &#x3D; [2, 7, 11, 15], target &#x3D; 9</span><br><span class="line"></span><br><span class="line">&gt;因为 nums[0] + nums[1] &#x3D; 2 + 7 &#x3D; 9</span><br><span class="line">&gt;所以返回 [0, 1]</span><br></pre></td></tr></table></figure>
</blockquote>
<p>​    这道题其实重点考察的是哈希表的使用，HashMap（据说查找是常数级别），非常有意思</p>
<p>​    有这几个方法：<strong>put</strong>()、<strong>containsKey</strong>()、<strong>get</strong>()，注意他们的使用</p>
<a id="more"></a>

<hr>
<h4 id="2-回文数"><a href="#2-回文数" class="headerlink" title="2. 回文数"></a>2. 回文数</h4><blockquote>
<p>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 121</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: -121</span><br><span class="line">输出: false</span><br><span class="line">解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。</span><br></pre></td></tr></table></figure>

<p><strong>示例 3:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 10</span><br><span class="line">输出: false</span><br><span class="line">解释: 从右向左读, 为 01 。因此它不是一个回文数。</span><br></pre></td></tr></table></figure>
</blockquote>
<p>​    其实这道题最简单的方法是转换成字符串来做，非常非常非常简单！但是需要很多额外的空间然而我当时是傻兮兮的直接做的，很亏很亏</p>
<p>​    第二个想法是将数字本身反转，然后将反转后的数字与原始数字进行比较，如果它们是相同的，那么这个数字就是回文。 但是，如果反转后的数字大于 int.MAXint.MAX，我们将遇到整数溢出问题。因此反转一半比较前面即可</p>
<hr>
<h4 id="3-从排序数组中删除重复项"><a href="#3-从排序数组中删除重复项" class="headerlink" title="3. 从排序数组中删除重复项"></a>3. 从排序数组中删除重复项</h4><blockquote>
<p>给定一个排序数组，你需要在<strong>原地</strong>删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。</p>
<p>不要使用额外的数组空间，你必须在<strong>原地修改输入数组</strong>并在使用 O(1) 额外空间的条件下完成。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定数组 nums &#x3D; [1,1,2], </span><br><span class="line"></span><br><span class="line">函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 </span><br><span class="line"></span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定 nums &#x3D; [0,0,1,1,1,2,2,3,3,4],</span><br><span class="line"></span><br><span class="line">函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。</span><br><span class="line"></span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure>
</blockquote>
<p>​    这道题目用一个双指针就行，一个指向数组前面部分，一个指向相对后面部分（毕竟有重复的数），即可利用一个数组来完成这件事情，非常方便，而且我发现这个是一个很重要的方法和思想</p>
<hr>
<h4 id="4-买卖股票的最佳时机-II"><a href="#4-买卖股票的最佳时机-II" class="headerlink" title="4. 买卖股票的最佳时机 II"></a>4. 买卖股票的最佳时机 II</h4><blockquote>
<p>给定一个数组，它的第 <em>i</em> 个元素是一支给定股票第 <em>i</em> 天的价格。</p>
<p>设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。</p>
<p><strong>注意：</strong>你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [7,1,5,3,6,4]</span><br><span class="line">输出: 7</span><br><span class="line">解释: 在第 2 天（股票价格 &#x3D; 1）的时候买入，在第 3 天（股票价格 &#x3D; 5）的时候卖出, 这笔交易所能获得利润 &#x3D; 5-1 &#x3D; 4 。</span><br><span class="line">     随后，在第 4 天（股票价格 &#x3D; 3）的时候买入，在第 5 天（股票价格 &#x3D; 6）的时候卖出, 这笔交易所能获得利润 &#x3D; 6-3 &#x3D; 3 。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [1,2,3,4,5]</span><br><span class="line">输出: 4</span><br><span class="line">解释: 在第 1 天（股票价格 &#x3D; 1）的时候买入，在第 5 天 （股票价格 &#x3D; 5）的时候卖出, 这笔交易所能获得利润 &#x3D; 5-1 &#x3D; 4 。</span><br><span class="line">     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。</span><br><span class="line">     因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。</span><br></pre></td></tr></table></figure>

<p><strong>示例 3:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [7,6,4,3,1]</span><br><span class="line">输出: 0</span><br><span class="line">解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。</span><br></pre></td></tr></table></figure>
</blockquote>
<p>​    这个题目如果画个图就会非常非常明白，这里面所谓的最大利润，其实就是折线图上上升部分的总和，然后就是so easy啦，相当的巧妙</p>
<hr>
<h4 id="5-旋转数组"><a href="#5-旋转数组" class="headerlink" title="5. 旋转数组"></a>5. 旋转数组</h4><blockquote>
<p>给定一个数组，将数组中的元素向右移动 <em>k</em> 个位置，其中 <em>k</em> 是非负数。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [1,2,3,4,5,6,7] 和 k &#x3D; 3</span><br><span class="line">输出: [5,6,7,1,2,3,4]</span><br><span class="line">解释:</span><br><span class="line">向右旋转 1 步: [7,1,2,3,4,5,6]</span><br><span class="line">向右旋转 2 步: [6,7,1,2,3,4,5]</span><br><span class="line">向右旋转 3 步: [5,6,7,1,2,3,4]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [-1,-100,3,99] 和 k &#x3D; 2</span><br><span class="line">输出: [3,99,-1,-100]</span><br><span class="line">解释: </span><br><span class="line">向右旋转 1 步: [99,-1,-100,3]</span><br><span class="line">向右旋转 2 步: [3,99,-1,-100]</span><br></pre></td></tr></table></figure>
</blockquote>
<p>​    这个题目有一个巧妙的变换方法，reverse(0, n-1), reverse(0, k), reverse(k, n-1)就OK了，完全无需任何额外的空间，非常非常牛逼！时间复杂度也是O(n)</p>
<hr>
<h4 id="6-存在重复"><a href="#6-存在重复" class="headerlink" title="6. 存在重复"></a>6. 存在重复</h4><blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定一个整数数组，判断是否存在重复元素。</span><br><span class="line"></span><br><span class="line">如果任何值在数组中出现至少两次，函数返回 true。如果数组中每个元素都不相同，则返回 false。</span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: [1,2,3,1]</span><br><span class="line">输出: true</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">输入: [1,2,3,4]</span><br><span class="line">输出: false</span><br><span class="line">示例 3:</span><br><span class="line"></span><br><span class="line">输入: [1,1,1,3,3,4,3,2,4,2]</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure>
</blockquote>
<p>​    这道题还是很简单的，不说了</p>
<hr>
<h4 id="7-只出现一次的数字"><a href="#7-只出现一次的数字" class="headerlink" title="7. 只出现一次的数字"></a>7. 只出现一次的数字</h4><blockquote>
<p>给定一个<strong>非空</strong>整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p>
<p><strong>说明：</strong></p>
<p>你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [2,2,1]</span><br><span class="line">输出: 1</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [4,1,2,1,2]</span><br><span class="line">输出: 4</span><br></pre></td></tr></table></figure>
</blockquote>
<p>  这个题目有一个巧妙的变换方法，reverse(0, n-1), reverse(0, k), reverse(k, n-1)就OK了，完全无需任何额外的空间，非常非常牛逼！时间复杂度也是O(n)</p>
<hr>
<h4 id="8-两个数组的交集-II"><a href="#8-两个数组的交集-II" class="headerlink" title="8. 两个数组的交集 II"></a>8. 两个数组的交集 II</h4><blockquote>
<p>给定两个数组，编写一个函数来计算它们的交集。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: nums1 &#x3D; [1,2,2,1], nums2 &#x3D; [2,2]</span><br><span class="line">输出: [2,2]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: nums1 &#x3D; [4,9,5], nums2 &#x3D; [9,4,9,8,4]</span><br><span class="line">输出: [4,9]</span><br></pre></td></tr></table></figure>
</blockquote>
<p>​    知道双指针的牛逼之处了吧！（用于两个数组就是了，本质还是一样的）</p>
<hr>
<h4 id="9-加一"><a href="#9-加一" class="headerlink" title="9. 加一"></a>9. 加一</h4><blockquote>
<p>给定一个由<strong>整数</strong>组成的<strong>非空</strong>数组所表示的非负整数，在该数的基础上加一。</p>
<p>最高位数字存放在数组的首位， 数组中每个元素只存储一个数字。</p>
<p>你可以假设除了整数 0 之外，这个整数不会以零开头。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [1,2,3]</span><br><span class="line">输出: [1,2,4]</span><br><span class="line">解释: 输入数组表示数字 123。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [4,3,2,1]</span><br><span class="line">输出: [4,3,2,2]</span><br><span class="line">解释: 输入数组表示数字 4321。</span><br></pre></td></tr></table></figure>
</blockquote>
<p>​    这题我本来还想着转换成整数加一来解决，但是很显然，会遇到超出整数表示范围的情况</p>
<p>​    所以最后当然就直接做了，当然写法还是很讲究的，像我之前就写了一堆废代码，看到别人的代码才觉得，woc，居然还能这么写，简单好多，真的。</p>
<hr>
<h4 id="10-移动零"><a href="#10-移动零" class="headerlink" title="10. 移动零"></a>10. 移动零</h4><blockquote>
<p>给定一个数组 <code>nums</code>，编写一个函数将所有 <code>0</code> 移动到数组的末尾，同时保持非零元素的相对顺序。</p>
<p><strong>示例:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [0,1,0,3,12]</span><br><span class="line">输出: [1,3,12,0,0]</span><br></pre></td></tr></table></figure>
</blockquote>
<p>​    这个题目，也是双指针，双指针真尼玛牛逼！简单了不止一点点，我当时还傻逼一样换来换去mmp</p>
<hr>
<h4 id="11-有效数独"><a href="#11-有效数独" class="headerlink" title="11. 有效数独"></a>11. 有效数独</h4><blockquote>
<p><strong>题目略</strong></p>
<p>（正常数独的规则）</p>
</blockquote>
<p>​    这个题目，我先开始还不知道怎么做，其实按照正常规则来就行，当然要用到一点计算机的思想</p>
<hr>
<h4 id="12-旋转图像"><a href="#12-旋转图像" class="headerlink" title="12. 旋转图像"></a>12. 旋转图像</h4><blockquote>
<p>给定一个 <em>n</em> × <em>n</em> 的二维矩阵表示一个图像。</p>
<p>将图像顺时针旋转 90 度。</p>
<p><strong>说明：</strong></p>
<p>你必须在<strong>原地</strong>旋转图像，这意味着你需要直接修改输入的二维矩阵。<strong>请不要</strong>使用另一个矩阵来旋转图像。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定 matrix &#x3D; </span><br><span class="line">[</span><br><span class="line">  [1,2,3],</span><br><span class="line">  [4,5,6],</span><br><span class="line">  [7,8,9]</span><br><span class="line">],</span><br><span class="line"></span><br><span class="line">原地旋转输入矩阵，使其变为:</span><br><span class="line">[</span><br><span class="line">  [7,4,1],</span><br><span class="line">  [8,5,2],</span><br><span class="line">  [9,6,3]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定 matrix &#x3D;</span><br><span class="line">[</span><br><span class="line">  [ 5, 1, 9,11],</span><br><span class="line">  [ 2, 4, 8,10],</span><br><span class="line">  [13, 3, 6, 7],</span><br><span class="line">  [15,14,12,16]</span><br><span class="line">], </span><br><span class="line"></span><br><span class="line">原地旋转输入矩阵，使其变为:</span><br><span class="line">[</span><br><span class="line">  [15,13, 2, 5],</span><br><span class="line">  [14, 3, 4, 1],</span><br><span class="line">  [12, 6, 8, 9],</span><br><span class="line">  [16, 7,10,11]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
</blockquote>
<p>​    这个旋转，我开始只找到了每个元素变换之后的位置，但是完全没有考虑到会发生变换再变换的情况（因为是遍历变换的）真的是蠢爆了！</p>
<p>​    这个其实需要变换两步来完成，和上面的reverse有异曲同工之妙，也有点像加入一个中间的子空间，最终得到我们需要的结果。这对于思考很多数学问题非常有帮助</p>
<p>​                                                            </p>
]]></content>
      <categories>
        <category>刷OJ</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>手机摄影学习笔记</title>
    <url>/2016/09/07/%E6%89%8B%E6%9C%BA%E6%91%84%E5%BD%B1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="焦距"><a href="#焦距" class="headerlink" title="焦距"></a>焦距</h2><p>1.广角：28mm，长焦800<br>2.光圈</p>
<a id="more"></a>

<h2 id="构图基础"><a href="#构图基础" class="headerlink" title="构图基础"></a>构图基础</h2><p>1.机位（站在哪里）<br>2.视点（不正常的视角）<br>3.层次（近中远），拍海滩要有前景<br>4.简化<br>小景深，剪影，纯色背景，留白</p>
<h2 id="构图进阶"><a href="#构图进阶" class="headerlink" title="构图进阶"></a>构图进阶</h2><p>1.立体透视：要么完全立体透视，要么完全平面化<br>2.对比：大小对比，动静对比，明暗对比，虚实对比，（贴在玻璃上就不会有反光）<br>3.质感<br>3.形式（中央，对称，重复，突变，框架）</p>
<h2 id="平面构成"><a href="#平面构成" class="headerlink" title="平面构成"></a>平面构成</h2><p>1.点线面</p>
<h2 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h2><p>procam，slowshutter,snapseed<br>黄金分割线<br>最佳兴趣点辅助线<br>黄金螺旋线</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>摄影</tag>
      </tags>
  </entry>
</search>
